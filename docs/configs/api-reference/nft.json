{
  "getWalletNFTs": {
    "apiHost": "https://deep-index.moralis.io/api/v2",
    "summary": "Get NFTs by wallet",
    "description": "Get NFTs owned by a given address.\n* The response will include status [SYNCED/SYNCING] based on the contracts being indexed.\n* Use the token_address param to get results for a specific contract only\n* Note that results will include all indexed NFTs\n* Any request that includes the token_address param will start the indexing process for that NFT collection the very first time it is requested.",
    "method": "GET",
    "path": "/:address/nft",
    "pathParams": [
      {
        "name": "address",
        "description": "The address of the wallet",
        "required": true,
        "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045",
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "chain",
        "description": "The chain to query",
        "required": false,
        "example": "eth",
        "type": "string",
        "enum": [
          "eth",
          "0x1",
          "goerli",
          "0x5",
          "sepolia",
          "0xaa36a7",
          "polygon",
          "0x89",
          "mumbai",
          "0x13881",
          "bsc",
          "0x38",
          "bsc testnet",
          "0x61",
          "avalanche",
          "0xa86a",
          "avalanche testnet",
          "0xa869",
          "fantom",
          "0xfa",
          "palm",
          "0x2a15c308d",
          "cronos",
          "0x19",
          "cronos testnet",
          "0x152",
          "arbitrum",
          "0xa4b1"
        ]
      },
      {
        "name": "format",
        "description": "The format of the token ID",
        "required": false,
        "example": "decimal",
        "type": "string"
      },
      {
        "name": "limit",
        "description": "The desired page size of the result.",
        "required": false,
        "type": "number"
      },
      {
        "name": "disable_total",
        "description": "If the result should skip returning the total count (Improves performance).",
        "required": false,
        "type": "boolean"
      },
      {
        "name": "token_addresses",
        "description": "The addresses to get balances for (optional)",
        "required": false,
        "type": "array",
        "field": { "type": "string" }
      },
      {
        "name": "cursor",
        "description": "The cursor returned in the previous response (used for getting the next page).",
        "type": "string"
      },
      {
        "name": "normalizeMetadata",
        "description": "Should normalized metadata be returned?",
        "required": false,
        "type": "boolean"
      }
    ],
    "responses": [
      {
        "status": "200",
        "description": "Returns a collection of NFT owners",
        "body": {
          "type": "object",
          "fields": [
            {
              "name": "status",
              "type": "string",
              "description": "The syncing status of the address [SYNCING/SYNCED]",
              "example": "SYNCING"
            },
            {
              "name": "total",
              "type": "number",
              "description": "The total number of matches for this query",
              "example": "2000"
            },
            {
              "name": "page",
              "type": "number",
              "description": "The current page of the result",
              "example": "2"
            },
            {
              "name": "page_size",
              "type": "number",
              "description": "The number of results per page",
              "example": "100"
            },
            {
              "name": "cursor",
              "type": "string",
              "description": "The cursor to get to the next page"
            },
            {
              "name": "result",
              "type": "object",
              "fields": [
                {
                  "name": "token_address",
                  "type": "string",
                  "description": "The address of the NFT contract",
                  "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB"
                },
                {
                  "name": "token_id",
                  "type": "string",
                  "description": "The token ID of the NFT",
                  "example": "15"
                },
                {
                  "name": "contract_type",
                  "type": "string",
                  "description": "The type of NFT contract standard",
                  "example": "ERC721"
                },
                {
                  "name": "owner_of",
                  "type": "string",
                  "description": "The wallet address of the owner of the NFT",
                  "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                },
                {
                  "name": "block_number",
                  "type": "string",
                  "description": "The block number when the amount or owner changed",
                  "example": "88256"
                },
                {
                  "name": "block_number_minted",
                  "type": "string",
                  "description": "The block number when the NFT was minted",
                  "example": "88256"
                },
                {
                  "name": "token_uri",
                  "type": "string",
                  "description": "The URI to the metadata of the token"
                },
                {
                  "name": "metadata",
                  "type": "string",
                  "description": "The metadata of the token"
                },
                {
                  "name": "normalized_metadata",
                  "description": "A normalized metadata version of the NFT's metadata.",
                  "type": "object",
                  "fields": [
                    {
                      "name": "name",
                      "type": "string",
                      "description": "The name or title of the NFT",
                      "example": "Moralis Mug"
                    },
                    {
                      "name": "description",
                      "type": "string",
                      "description": "A detailed description of the NFT",
                      "example": "Moralis Coffee nug 3D Asset that can be used in 3D worldspaces. This NFT is presented as a flat PNG, a Unity3D Prefab and a standard fbx."
                    },
                    {
                      "name": "image",
                      "type": "string",
                      "description": "The URL of the NFT's image",
                      "example": "https://arw2wxg84h6b.moralishost.com:2053/server/files/tNJatzsHirx4V2VAep6sc923OYGxvkpBeJttR7Ks/de504bbadadcbe30c86278342fcf2560_moralismug.png"
                    },
                    {
                      "name": "external_link",
                      "type": "string",
                      "description": "A link to additional information",
                      "example": "https://giphy.com/gifs/loop-recursion-ting-aaODAv1iuQdgI"
                    },
                    {
                      "name": "animation_url",
                      "type": "string",
                      "description": "An animated version of the NFT's image",
                      "example": "https://giphy.com/gifs/food-design-donuts-o9ngTPVYW4qo8"
                    },
                    {
                      "name": "attributes",
                      "type": "array",
                      "field": {
                        "type": "object",
                        "fields": [
                          {
                            "name": "trait_type",
                            "type": "string",
                            "description": "The trait title or descriptor",
                            "example": "Eye Color"
                          },
                          {
                            "name": "value",
                            "type": "string",
                            "description": "The value of the attribute",
                            "example": "hazel"
                          },
                          {
                            "name": "display_type",
                            "type": "string",
                            "description": "The type the attribute value should be displayed as",
                            "example": "string"
                          },
                          {
                            "name": "max_value",
                            "type": "number",
                            "description": "For numeric values, the upper range",
                            "example": 100
                          },
                          {
                            "name": "trait_count",
                            "type": "number",
                            "description": "The number of possible values for this trait",
                            "example": 7
                          },
                          {
                            "name": "order",
                            "type": "number",
                            "description": "Order the trait should appear in the attribute list.",
                            "example": 1
                          }
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "media_links",
                  "description": "A set of links to 'thumbnail / preview' media files",
                  "type": "object",
                  "fields": [
                    {
                      "name": "mimetype",
                      "type": "string",
                      "required": true,
                      "description": "The mimetype of the media file [see https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types]"
                    },
                    {
                      "name": "category",
                      "type": "string",
                      "required": true,
                      "enum": ["image", "audio", "video"]
                    },
                    {
                      "name": "original_media_url",
                      "type": "string",
                      "required": true,
                      "description": "The url of the original media file."
                    },
                    {
                      "name": "parent_hash",
                      "type": "string",
                      "required": true,
                      "description": "Hash value of the original media file."
                    },
                    {
                      "name": "media_collection",
                      "required": true,
                      "description": "Preview item associated with the original",
                      "type": "object",
                      "fields": [
                        {
                          "name": "original",
                          "required": true,
                          "description": "Information about the original media file",
                          "type": "object",
                          "fields": [
                            {
                              "name": "width",
                              "type": "integer",
                              "description": "The width of the preview image.",
                              "required": true
                            },
                            {
                              "name": "height",
                              "type": "integer",
                              "description": "The height of the preview image.",
                              "required": true
                            },
                            {
                              "name": "url",
                              "type": "string",
                              "description": "The url of the preview file.",
                              "required": true
                            }
                          ]
                        },
                        {
                          "name": "low",
                          "required": true,
                          "description": "Preview media file, lowest quality (for images 100px x 100px)",
                          "type": "object",
                          "fields": [
                            {
                              "name": "width",
                              "type": "integer",
                              "description": "The width of the preview image.",
                              "required": true
                            },
                            {
                              "name": "height",
                              "type": "integer",
                              "description": "The height of the preview image.",
                              "required": true
                            },
                            {
                              "name": "url",
                              "type": "string",
                              "description": "The url of the preview file.",
                              "required": true
                            }
                          ]
                        },
                        {
                          "name": "medium",
                          "required": true,
                          "description": "Preview media file, medium quality (for images 250px x 250px)",
                          "type": "object",
                          "fields": [
                            {
                              "name": "width",
                              "type": "integer",
                              "description": "The width of the preview image.",
                              "required": true
                            },
                            {
                              "name": "height",
                              "type": "integer",
                              "description": "The height of the preview image.",
                              "required": true
                            },
                            {
                              "name": "url",
                              "type": "string",
                              "description": "The url of the preview file.",
                              "required": true
                            }
                          ]
                        },
                        {
                          "name": "high",
                          "required": true,
                          "description": "Preview media file, highest quality (for images 500px x 500px)",
                          "type": "object",
                          "fields": [
                            {
                              "name": "width",
                              "type": "integer",
                              "description": "The width of the preview image.",
                              "required": true
                            },
                            {
                              "name": "height",
                              "type": "integer",
                              "description": "The height of the preview image.",
                              "required": true
                            },
                            {
                              "name": "url",
                              "type": "string",
                              "description": "The url of the preview file.",
                              "required": true
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "amount",
                  "type": "string",
                  "description": "The number of this item the user owns (used by ERC1155)",
                  "example": "1"
                },
                {
                  "name": "name",
                  "type": "string",
                  "description": "The name of the NFT contract",
                  "example": "CryptoKitties"
                },
                {
                  "name": "symbol",
                  "type": "string",
                  "description": "The symbol of the NFT contract",
                  "example": "RARI"
                },
                {
                  "name": "token_hash",
                  "type": "string",
                  "description": "The token hash",
                  "example": "502cee781b0fb40ea02508b21d319ced"
                },
                {
                  "name": "last_token_uri_sync",
                  "type": "string",
                  "description": "When the token_uri was last updated",
                  "example": "2021-02-24T00:47:26.647Z"
                },
                {
                  "name": "last_metadata_sync",
                  "type": "string",
                  "description": "When the metadata was last updated",
                  "example": "2021-02-24T00:47:26.647Z"
                }
              ]
            }
          ]
        }
      }
    ],
    "codeSamples": [
      {
        "language": "node",
        "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const address = '0x1234567890123456789012345678901234567890';\n\n    const chain = EvmChain.ETHEREUM;\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.nft.getWalletNFTs({\n        address,\n        chain,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n",
        "name": "Moralis NodeJS SDK"
      },
      {
        "language": "csharp",
        "code": "private async Task<bool> GetNFTs(IWeb3Api web3Api, string address)\n{\n    bool result = true;\n    try\n    {\n        NftOwnerCollection resp = await web3Api.Account.GetNFTs(address.ToLower(), ChainList.eth);\n        result = resp is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n    return result;\n}\n",
        "name": "Moralis C# SDK"
      },
      {
        "language": "python",
        "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\", \n    \"chain\": \"eth\", \n    \"format\": \"decimal\", \n    \"limit\": 0, \n    \"token_addresses\": [], \n    \"cursor\": \"\", \n    \"normalizeMetadata\": True, \n}\n\nresult = evm_api.nft.get_wallet_nfts(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
      }
    ]
  },
  "getMultipleNFTs": {
    "apiHost": "https://deep-index.moralis.io/api/v2",
    "summary": "Get Multiple NFTs",
    "description": "Returns an array of NFTs specified in the request.\n* Note that results will include all indexed NFTs\n* Any request that includes the token_address param will start the indexing process for that NFT collection the very first time it is requested.\n* Only 25 NFTs can be fetched in one API call.",
    "method": "POST",
    "path": "/nft/getMultipleNFTs",
    "pathParams": [],
    "queryParams": [
      {
        "name": "chain",
        "description": "The chain to query",
        "required": false,
        "example": "eth",
        "type": "string",
        "enum": [
          "eth",
          "0x1",
          "goerli",
          "0x5",
          "sepolia",
          "0xaa36a7",
          "polygon",
          "0x89",
          "mumbai",
          "0x13881",
          "bsc",
          "0x38",
          "bsc testnet",
          "0x61",
          "avalanche",
          "0xa86a",
          "avalanche testnet",
          "0xa869",
          "fantom",
          "0xfa",
          "palm",
          "0x2a15c308d",
          "cronos",
          "0x19",
          "cronos testnet",
          "0x152",
          "arbitrum",
          "0xa4b1"
        ]
      }
    ],
    "bodyParam": {
      "required": true,
      "description": "Body",
      "type": "object",
      "fields": [
        {
          "name": "tokens",
          "type": "array",
          "required": true,
          "description": "The tokens to be fetched (max 25 tokens)",
          "example": [
            {
              "token_address": "0xa4991609c508b6d4fb7156426db0bd49fe298bd8",
              "token_id": "12"
            },
            {
              "token_address": "0x3c64dc415ebb4690d1df2b6216148c8de6dd29f7",
              "token_id": "1"
            },
            {
              "token_address": "0x3c64dc415ebb4690d1df2b6216148c8de6dd29f7",
              "token_id": "200"
            }
          ],
          "field": {
            "type": "object",
            "fields": [
              {
                "name": "token_address",
                "type": "string",
                "description": "The contract address",
                "example": "0x06012c8cf97bead5deae237070f9587f8e7a266d"
              },
              {
                "name": "token_id",
                "type": "string",
                "description": "The id of the token",
                "example": 100
              }
            ]
          }
        },
        {
          "name": "normalizeMetadata",
          "type": "boolean",
          "required": false,
          "description": "Should normalized metadata be returned?",
          "example": false
        }
      ]
    },
    "responses": [
      {
        "status": "200",
        "description": "Returns a collection of NFTs",
        "body": {
          "type": "array",
          "field": {
            "type": "object",
            "fields": [
              {
                "name": "token_address",
                "type": "string",
                "description": "The address of the NFT contract",
                "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB",
                "required": true
              },
              {
                "name": "token_id",
                "type": "string",
                "description": "The token ID of the NFT",
                "example": "15",
                "required": true
              },
              {
                "name": "contract_type",
                "type": "string",
                "description": "The type of NFT contract standard",
                "example": "ERC721",
                "required": true
              },
              {
                "name": "owner_of",
                "type": "string",
                "description": "The wallet address of the owner of the NFT",
                "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e",
                "required": true
              },
              {
                "name": "block_number",
                "type": "string",
                "description": "The block number when the amount or owner changed",
                "example": "88256",
                "required": true
              },
              {
                "name": "block_number_minted",
                "type": "string",
                "description": "The block number when the NFT was minted",
                "example": "88256",
                "required": true
              },
              {
                "name": "token_uri",
                "type": "string",
                "description": "The URI to the metadata of the token"
              },
              {
                "name": "metadata",
                "type": "string",
                "description": "The metadata of the token"
              },
              {
                "name": "normalized_metadata",
                "type": "object",
                "description": "A normalized metadata version of the NFT's metadata.",
                "fields": [
                  {
                    "name": "name",
                    "type": "string",
                    "description": "The name or title of the NFT",
                    "example": "Moralis Mug"
                  },
                  {
                    "name": "description",
                    "type": "string",
                    "description": "A detailed description of the NFT",
                    "example": "Moralis Coffee nug 3D Asset that can be used in 3D worldspaces. This NFT is presented as a flat PNG, a Unity3D Prefab and a standard fbx."
                  },
                  {
                    "name": "image",
                    "type": "string",
                    "description": "The URL of the NFT's image",
                    "example": "https://arw2wxg84h6b.moralishost.com:2053/server/files/tNJatzsHirx4V2VAep6sc923OYGxvkpBeJttR7Ks/de504bbadadcbe30c86278342fcf2560_moralismug.png"
                  },
                  {
                    "name": "external_link",
                    "type": "string",
                    "description": "A link to additional information",
                    "example": "https://giphy.com/gifs/loop-recursion-ting-aaODAv1iuQdgI"
                  },
                  {
                    "name": "animation_url",
                    "type": "string",
                    "description": "An animated version of the NFT's image",
                    "example": "https://giphy.com/gifs/food-design-donuts-o9ngTPVYW4qo8"
                  },
                  {
                    "name": "attributes",
                    "type": "array",
                    "field": {
                      "type": "object",
                      "fields": [
                        {
                          "name": "trait_type",
                          "type": "string",
                          "description": "The trait title or descriptor",
                          "example": "Eye Color"
                        },
                        {
                          "name": "value",
                          "type": "object",
                          "description": "The value of the attribute",
                          "example": "hazel"
                        },
                        {
                          "name": "display_type",
                          "type": "string",
                          "description": "The type the attribute value should be displayed as",
                          "example": "string"
                        },
                        {
                          "name": "max_value",
                          "type": "number",
                          "description": "For numeric values, the upper range",
                          "example": 100
                        },
                        {
                          "name": "trait_count",
                          "type": "number",
                          "description": "The number of possible values for this trait",
                          "example": 7
                        },
                        {
                          "name": "order",
                          "type": "number",
                          "description": "Order the trait should appear in the attribute list.",
                          "example": 1
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "name": "amount",
                "type": "string",
                "description": "The number of this item the user owns (used by ERC1155)",
                "example": "1"
              },
              {
                "name": "name",
                "type": "string",
                "description": "The name of the NFT contract",
                "example": "CryptoKitties",
                "required": true
              },
              {
                "name": "symbol",
                "type": "string",
                "description": "The symbol of the NFT contract",
                "example": "RARI",
                "required": true
              },
              {
                "name": "token_hash",
                "type": "string",
                "description": "The token hash",
                "example": "502cee781b0fb40ea02508b21d319ced",
                "required": true
              },
              {
                "name": "last_token_uri_sync",
                "type": "string",
                "description": "When the token_uri was last updated",
                "example": "2021-02-24T00:47:26.647Z",
                "required": true
              },
              {
                "name": "last_metadata_sync",
                "type": "string",
                "description": "When the metadata was last updated",
                "example": "2021-02-24T00:47:26.647Z",
                "required": true
              }
            ]
          }
        }
      }
    ],
    "codeSamples": [
      {
        "language": "python",
        "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"chain\": \"eth\", \n}\nbody = {\n    \"tokens\": [{'token_address': '0xa4991609c508b6d4fb7156426db0bd49fe298bd8', 'token_id': '12'}, {'token_address': '0x3c64dc415ebb4690d1df2b6216148c8de6dd29f7', 'token_id': '1'}, {'token_address': '0x3c64dc415ebb4690d1df2b6216148c8de6dd29f7', 'token_id': '200'}], \n    \"normalizeMetadata\": False, \n}\n\nresult = evm_api.nft.get_multiple_nfts(\n    api_key=api_key,\n    params=params,\n    body=body,\n)\n\nprint(result)\n"
      }
    ]
  },
  "getWalletNFTTransfers": {
    "apiHost": "https://deep-index.moralis.io/api/v2",
    "summary": "Get NFT transfers by wallet",
    "description": "Get transfers of NFTs given the wallet and other parameters.",
    "method": "GET",
    "path": "/:address/nft/transfers",
    "pathParams": [
      {
        "name": "address",
        "description": "The wallet address of the sender or recipient of the transfers",
        "required": true,
        "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045",
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "chain",
        "description": "The chain to query",
        "required": false,
        "example": "eth",
        "type": "string",
        "enum": [
          "eth",
          "0x1",
          "goerli",
          "0x5",
          "sepolia",
          "0xaa36a7",
          "polygon",
          "0x89",
          "mumbai",
          "0x13881",
          "bsc",
          "0x38",
          "bsc testnet",
          "0x61",
          "avalanche",
          "0xa86a",
          "avalanche testnet",
          "0xa869",
          "fantom",
          "0xfa",
          "palm",
          "0x2a15c308d",
          "cronos",
          "0x19",
          "cronos testnet",
          "0x152",
          "arbitrum",
          "0xa4b1"
        ]
      },
      {
        "name": "format",
        "description": "The format of the token ID",
        "required": false,
        "example": "decimal",
        "type": "string"
      },
      {
        "name": "direction",
        "description": "The transfer direction",
        "required": false,
        "example": "both",
        "type": "string"
      },
      {
        "name": "from_block",
        "description": "The minimum block number from which to get the transfers\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
        "required": false,
        "type": "number"
      },
      {
        "name": "to_block",
        "description": "To get the reserves at this block number",
        "required": false,
        "type": "string"
      },
      {
        "name": "limit",
        "description": "The desired page size of the result.",
        "required": false,
        "type": "number"
      },
      {
        "name": "disable_total",
        "description": "If the result should skip returning the total count (Improves performance).",
        "required": false,
        "type": "boolean"
      },
      {
        "name": "cursor",
        "description": "The cursor returned in the previous response (used for getting the next page). Learn more on cursor pagination [here](/web3-data-api/pagination).",
        "type": "string"
      }
    ],
    "responses": [
      {
        "status": "200",
        "description": "Returns a collection of NFT transfers",
        "body": {
          "type": "object",
          "fields": [
            {
              "name": "total",
              "type": "number",
              "description": "The total number of matches for this query",
              "example": "2000"
            },
            {
              "name": "page",
              "type": "number",
              "description": "The current page of the result",
              "example": "2"
            },
            {
              "name": "page_size",
              "type": "number",
              "description": "The number of results per page",
              "example": "100"
            },
            {
              "name": "cursor",
              "description": "The cursor returned in the previous response (used for getting the next page). Learn more on cursor pagination [here](/web3-data-api/pagination).",
              "type": "string"
            },
            {
              "name": "result",
              "type": "object",
              "fields": [
                {
                  "name": "token_address",
                  "type": "string",
                  "description": "The address of the NFT contract",
                  "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                },
                {
                  "name": "token_id",
                  "type": "string",
                  "description": "The token ID of the NFT",
                  "example": "15"
                },
                {
                  "name": "from_address",
                  "type": "string",
                  "description": "The address that sent the NFT",
                  "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                },
                {
                  "name": "to_address",
                  "type": "string",
                  "description": "The address that received the NFT",
                  "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "The value that was sent in the transaction (ETH/BNB/etc..)",
                  "example": "1000000000000000"
                },
                {
                  "name": "amount",
                  "type": "string",
                  "description": "The number of tokens transferred",
                  "example": "1"
                },
                {
                  "name": "contract_type",
                  "type": "string",
                  "description": "The type of NFT contract standard",
                  "example": "ERC721"
                },
                {
                  "name": "block_number",
                  "type": "string",
                  "description": "The block number of the transaction",
                  "example": "88256"
                },
                {
                  "name": "block_timestamp",
                  "type": "string",
                  "description": "The block timestamp",
                  "example": "2021-06-04T16:00:15"
                },
                {
                  "name": "block_hash",
                  "type": "string",
                  "description": "The block hash of the transaction"
                },
                {
                  "name": "transaction_hash",
                  "type": "string",
                  "description": "The transaction hash",
                  "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                },
                {
                  "name": "transaction_type",
                  "type": "string",
                  "description": "The transaction type"
                },
                {
                  "name": "transaction_index",
                  "type": "number",
                  "description": "The transaction index"
                },
                {
                  "name": "log_index",
                  "type": "number",
                  "description": "The log index"
                },
                {
                  "name": "operator",
                  "type": "string",
                  "description": "The operator present only for ERC1155 transfers",
                  "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                }
              ]
            },
            {
              "name": "block_exists",
              "type": "boolean",
              "description": "Indicator if the block exists",
              "example": true
            },
            {
              "name": "index_complete",
              "type": "boolean",
              "description": "Indicator if the block is fully indexed",
              "example": true
            }
          ]
        }
      }
    ],
    "codeSamples": [
      {
        "language": "node",
        "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const address = '0x1234567890123456789012345678901234567890';\n\n    const chain = EvmChain.ETHEREUM;\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.nft.getWalletNFTTransfers({\n        address,\n        chain,\n    });\n\n    console.log(response);\n} catch (e) {\n    console.error(e);\n}\n",
        "name": "Moralis NodeJS SDK"
      },
      {
        "language": "csharp",
        "code": "private async Task<bool> GetNFTTransfers(IWeb3Api web3Api, string address)\n{\n    bool result = true;\n    try\n    {\n        NftTransferCollection balance = await web3Api.Account.GetNFTTransfers(address.ToLower(), ChainList.eth);\n        result = balance is { } && balance.Result is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n    return result;\n}\n",
        "name": "Moralis C# SDK"
      },
      {
        "language": "python",
        "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\", \n    \"chain\": \"eth\", \n    \"format\": \"decimal\", \n    \"direction\": \"both\", \n    \"from_block\": 0, \n    \"to_block\": \"\", \n    \"limit\": 0, \n    \"cursor\": \"\", \n}\n\nresult = evm_api.nft.get_wallet_nft_transfers(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
      }
    ]
  },
  "getWalletNFTCollections": {
    "apiHost": "https://deep-index.moralis.io/api/v2",
    "summary": "Get NFT collections by wallet",
    "description": "Get NFT collections owned by a given wallet address.",
    "method": "GET",
    "path": "/:address/nft/collections",
    "pathParams": [
      {
        "name": "address",
        "description": "The wallet address of the owner of NFTs in the collections",
        "required": true,
        "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045",
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "chain",
        "description": "The chain to query",
        "required": false,
        "example": "eth",
        "type": "string",
        "enum": [
          "eth",
          "0x1",
          "goerli",
          "0x5",
          "sepolia",
          "0xaa36a7",
          "polygon",
          "0x89",
          "mumbai",
          "0x13881",
          "bsc",
          "0x38",
          "bsc testnet",
          "0x61",
          "avalanche",
          "0xa86a",
          "avalanche testnet",
          "0xa869",
          "fantom",
          "0xfa",
          "palm",
          "0x2a15c308d",
          "cronos",
          "0x19",
          "cronos testnet",
          "0x152",
          "arbitrum",
          "0xa4b1"
        ]
      },
      {
        "name": "limit",
        "description": "The desired page size of the result.",
        "required": false,
        "type": "number"
      },
      {
        "name": "disable_total",
        "description": "If the result should skip returning the total count (Improves performance).",
        "required": false,
        "type": "boolean"
      },
      {
        "name": "cursor",
        "description": "The cursor returned in the previous response (used for getting the next page).",
        "type": "string"
      }
    ],
    "responses": [
      {
        "status": "200",
        "description": "Returns the NFT collections owned by a wallet",
        "body": {
          "type": "object",
          "fields": [
            {
              "name": "status",
              "type": "string",
              "description": "The syncing status of the address [SYNCING/SYNCED]",
              "example": "SYNCING"
            },
            {
              "name": "total",
              "type": "number",
              "description": "The total number of matches for this query",
              "example": "2000"
            },
            {
              "name": "page",
              "type": "number",
              "description": "The current page of the result",
              "example": "2"
            },
            {
              "name": "page_size",
              "type": "number",
              "description": "The number of results per page",
              "example": "100"
            },
            {
              "name": "cursor",
              "type": "string",
              "description": "The cursor to get to the next page. ). Learn more on cursor pagination [here](/web3-data-api/pagination)."
            },
            {
              "name": "result",
              "type": "object",
              "fields": [
                {
                  "name": "token_address",
                  "type": "string",
                  "description": "The address of the NFT contract",
                  "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB"
                },
                {
                  "name": "contract_type",
                  "type": "string",
                  "description": "The type of NFT contract standard",
                  "example": "ERC721"
                },
                {
                  "name": "name",
                  "type": "string",
                  "description": "The name of the NFT contract",
                  "example": "CryptoKitties"
                },
                {
                  "name": "symbol",
                  "type": "string",
                  "description": "The symbol of the NFT contract",
                  "example": "RARI"
                }
              ]
            }
          ]
        }
      }
    ],
    "codeSamples": [
      {
        "language": "node",
        "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const address = '0x1234567890123456789012345678901234567890';\n\n    const chain = EvmChain.ETHEREUM;\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.nft.getWalletNFTCollections({\n        address,\n        chain,\n    });\n\n    console.log(response);\n} catch (e) {\n    console.error(e);\n}\n",
        "name": "Moralis NodeJS SDK"
      },
      {
        "language": "python",
        "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\", \n    \"chain\": \"eth\", \n    \"limit\": 0, \n    \"cursor\": \"\", \n}\n\nresult = evm_api.nft.get_wallet_nft_collections(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
      }
    ]
  },
  "getContractNFTs": {
    "apiHost": "https://deep-index.moralis.io/api/v2",
    "summary": "Get NFTs by contract",
    "description": "Get NFTs for a given contract address, including metadata for all NFTs (where available).\n* Results are limited to 100 per page by default\n* Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.",
    "method": "GET",
    "path": "/nft/:address",
    "pathParams": [
      {
        "name": "address",
        "description": "The address of the NFT contract",
        "required": true,
        "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB",
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "chain",
        "description": "The chain to query",
        "required": false,
        "example": "eth",
        "type": "string",
        "enum": [
          "eth",
          "0x1",
          "goerli",
          "0x5",
          "sepolia",
          "0xaa36a7",
          "polygon",
          "0x89",
          "mumbai",
          "0x13881",
          "bsc",
          "0x38",
          "bsc testnet",
          "0x61",
          "avalanche",
          "0xa86a",
          "avalanche testnet",
          "0xa869",
          "fantom",
          "0xfa",
          "palm",
          "0x2a15c308d",
          "cronos",
          "0x19",
          "cronos testnet",
          "0x152",
          "arbitrum",
          "0xa4b1"
        ]
      },
      {
        "name": "format",
        "description": "The format of the token ID",
        "required": false,
        "example": "decimal",
        "type": "string"
      },
      {
        "name": "limit",
        "description": "The desired page size of the result.",
        "required": false,
        "type": "number"
      },
      {
        "name": "totalRanges",
        "description": "The number of subranges to split the results into",
        "required": false,
        "type": "number"
      },
      {
        "name": "range",
        "description": "The desired subrange to query",
        "required": false,
        "type": "number"
      },
      {
        "name": "disable_total",
        "description": "If the result should skip returning the total count (Improves performance).",
        "required": false,
        "type": "boolean"
      },
      {
        "name": "cursor",
        "description": "The cursor returned in the previous response (used for getting the next page). Learn more on cursor pagination [here](/web3-data-api/pagination).",
        "type": "string"
      },
      {
        "name": "normalizeMetadata",
        "description": "The option to enable metadata normalization. Learn more about metadata normalization [here](https://docs.moralis.io/web3-data-api/metadata-normalization/metadata-normalization).",
        "required": false,
        "type": "boolean"
      }
    ],
    "responses": [
      {
        "status": "200",
        "description": "Returns a collection of NFTs",
        "body": {
          "type": "object",
          "fields": [
            {
              "name": "total",
              "type": "number",
              "description": "The total number of matches for this query",
              "example": "2000"
            },
            {
              "name": "page",
              "type": "number",
              "description": "The current page of the result",
              "example": "2"
            },
            {
              "name": "page_size",
              "type": "number",
              "description": "The number of results per page",
              "example": "100"
            },
            {
              "name": "cursor",
              "description": "The cursor returned in the previous response (used for getting the next page). Learn more on cursor pagination [here](/web3-data-api/pagination).",
              "type": "string"
            },
            {
              "name": "result",
              "type": "object",
              "fields": [
                {
                  "name": "token_address",
                  "type": "string",
                  "description": "The address of the NFT contract",
                  "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB"
                },
                {
                  "name": "token_id",
                  "type": "string",
                  "description": "The token ID of the NFT",
                  "example": "15"
                },
                {
                  "name": "owner_of",
                  "type": "string",
                  "description": "The wallet address of the owner of the NFT",
                  "example": "0x9c83ff0f1c8924da96cb2fcb7e093f78eb2e316b"
                },
                {
                  "name": "token_hash",
                  "type": "string",
                  "description": "The token hash",
                  "example": "502cee781b0fb40ea02508b21d319ced"
                },
                {
                  "name": "block_number",
                  "type": "string",
                  "description": "The block number when the amount or owner changed",
                  "example": "88256"
                },
                {
                  "name": "block_number_minted",
                  "type": "string",
                  "description": "The block number when the NFT was minted",
                  "example": "88256"
                },
                {
                  "name": "contract_type",
                  "type": "string",
                  "description": "The type of NFT contract standard",
                  "example": "ERC721"
                },
                {
                  "name": "token_uri",
                  "type": "string",
                  "description": "The URI to the metadata of the token"
                },
                {
                  "name": "metadata",
                  "type": "string",
                  "description": "The metadata of the token"
                },
                {
                  "name": "normalized_metadata",
                  "description": "A normalized metadata version of the NFT's metadata.",
                  "type": "object",
                  "fields": [
                    {
                      "name": "name",
                      "type": "string",
                      "description": "The name or title of the NFT",
                      "example": "Moralis Mug"
                    },
                    {
                      "name": "description",
                      "type": "string",
                      "description": "A detailed description of the NFT",
                      "example": "Moralis Coffee nug 3D Asset that can be used in 3D worldspaces. This NFT is presented as a flat PNG, a Unity3D Prefab and a standard fbx."
                    },
                    {
                      "name": "image",
                      "type": "string",
                      "description": "The URL of the NFT's image",
                      "example": "https://arw2wxg84h6b.moralishost.com:2053/server/files/tNJatzsHirx4V2VAep6sc923OYGxvkpBeJttR7Ks/de504bbadadcbe30c86278342fcf2560_moralismug.png"
                    },
                    {
                      "name": "external_link",
                      "type": "string",
                      "description": "A link to additional information",
                      "example": "https://giphy.com/gifs/loop-recursion-ting-aaODAv1iuQdgI"
                    },
                    {
                      "name": "animation_url",
                      "type": "string",
                      "description": "An animated version of the NFT's image",
                      "example": "https://giphy.com/gifs/food-design-donuts-o9ngTPVYW4qo8"
                    },
                    {
                      "name": "attributes",
                      "type": "array",
                      "field": {
                        "type": "object",
                        "fields": [
                          {
                            "name": "trait_type",
                            "type": "string",
                            "description": "The trait title or descriptor",
                            "example": "Eye Color"
                          },
                          {
                            "name": "value",
                            "type": "string",
                            "description": "The value of the attribute",
                            "example": "hazel"
                          },
                          {
                            "name": "display_type",
                            "type": "string",
                            "description": "The type the attribute value should be displayed as",
                            "example": "string"
                          },
                          {
                            "name": "max_value",
                            "type": "number",
                            "description": "For numeric values, the upper range",
                            "example": 100
                          },
                          {
                            "name": "trait_count",
                            "type": "number",
                            "description": "The number of possible values for this trait",
                            "example": 7
                          },
                          {
                            "name": "order",
                            "type": "number",
                            "description": "Order the trait should appear in the attribute list.",
                            "example": 1
                          }
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "media_links",
                  "description": "A set of links to 'thumbnail / preview' media files",
                  "type": "object",
                  "fields": [
                    {
                      "name": "mimetype",
                      "type": "string",
                      "required": true,
                      "description": "The mimetype of the media file [see https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types]"
                    },
                    {
                      "name": "category",
                      "type": "string",
                      "required": true,
                      "enum": ["image", "audio", "video"]
                    },
                    {
                      "name": "original_media_url",
                      "type": "string",
                      "required": true,
                      "description": "The url of the original media file."
                    },
                    {
                      "name": "parent_hash",
                      "type": "string",
                      "required": true,
                      "description": "Hash value of the original media file."
                    },
                    {
                      "name": "media_collection",
                      "required": true,
                      "description": "Preview item associated with the original",
                      "type": "object",
                      "fields": [
                        {
                          "name": "original",
                          "required": true,
                          "description": "Information about the original media file",
                          "type": "object",
                          "fields": [
                            {
                              "name": "width",
                              "type": "integer",
                              "description": "The width of the preview image.",
                              "required": true
                            },
                            {
                              "name": "height",
                              "type": "integer",
                              "description": "The height of the preview image.",
                              "required": true
                            },
                            {
                              "name": "url",
                              "type": "string",
                              "description": "The url of the preview file.",
                              "required": true
                            }
                          ]
                        },
                        {
                          "name": "low",
                          "required": true,
                          "description": "Preview media file, lowest quality (for images 100px x 100px)",
                          "type": "object",
                          "fields": [
                            {
                              "name": "width",
                              "type": "integer",
                              "description": "The width of the preview image.",
                              "required": true
                            },
                            {
                              "name": "height",
                              "type": "integer",
                              "description": "The height of the preview image.",
                              "required": true
                            },
                            {
                              "name": "url",
                              "type": "string",
                              "description": "The url of the preview file.",
                              "required": true
                            }
                          ]
                        },
                        {
                          "name": "medium",
                          "required": true,
                          "description": "Preview media file, medium quality (for images 250px x 250px)",
                          "type": "object",
                          "fields": [
                            {
                              "name": "width",
                              "type": "integer",
                              "description": "The width of the preview image.",
                              "required": true
                            },
                            {
                              "name": "height",
                              "type": "integer",
                              "description": "The height of the preview image.",
                              "required": true
                            },
                            {
                              "name": "url",
                              "type": "string",
                              "description": "The url of the preview file.",
                              "required": true
                            }
                          ]
                        },
                        {
                          "name": "high",
                          "required": true,
                          "description": "Preview media file, highest quality (for images 500px x 500px)",
                          "type": "object",
                          "fields": [
                            {
                              "name": "width",
                              "type": "integer",
                              "description": "The width of the preview image.",
                              "required": true
                            },
                            {
                              "name": "height",
                              "type": "integer",
                              "description": "The height of the preview image.",
                              "required": true
                            },
                            {
                              "name": "url",
                              "type": "string",
                              "description": "The url of the preview file.",
                              "required": true
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "minter_address",
                  "type": "string",
                  "description": "The address that minted the NFT",
                  "example": "0x9c83ff0f1c8924da96cb2fcb7e093f78eb2e316b"
                },
                {
                  "name": "last_token_uri_sync",
                  "type": "string",
                  "description": "When the token_uri was last updated"
                },
                {
                  "name": "last_metadata_sync",
                  "type": "string",
                  "description": "When the metadata was last updated"
                },
                {
                  "name": "amount",
                  "type": "string",
                  "description": "The quantity of this item that the user owns (used by ERC1155)",
                  "example": "1"
                },
                {
                  "name": "name",
                  "type": "string",
                  "description": "The name of the NFT contract",
                  "example": "CryptoKitties"
                },
                {
                  "name": "symbol",
                  "type": "string",
                  "description": "The symbol of the NFT contract",
                  "example": "RARI"
                }
              ]
            }
          ]
        }
      }
    ],
    "codeSamples": [
      {
        "language": "node",
        "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const chain = EvmChain.ETHEREUM;\n\n    const address = '0x1234567890123456789012345678901234567890';\n\n    const totalRanges = 1000;\n\n    const range = 1;\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.nft.getContractNFTs({\n        address,\n        chain,\n        totalRanges,\n        range,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
        "name": "Moralis NodeJS SDK"
      },
      {
        "language": "csharp",
        "code": "private async Task<bool> GetAllTokenIds(IWeb3Api web3Api)\n{\n    bool result = true;\n     try\n    {\n        NftCollection resp = await web3Api.Token.GetAllTokenIds(\"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", ChainList.eth, null, \"\", 10);\n         result = resp is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n     return result;\n}\n        ",
        "name": "Moralis C# SDK"
      },
      {
        "language": "python",
        "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\", \n    \"chain\": \"eth\", \n    \"format\": \"decimal\", \n    \"limit\": 0, \n    \"totalRanges\": 0, \n    \"range\": 0, \n    \"cursor\": \"\", \n    \"normalizeMetadata\": True, \n}\n\nresult = evm_api.nft.get_contract_nfts(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
      }
    ]
  },
  "getNFTOwners": {
    "apiHost": "https://deep-index.moralis.io/api/v2",
    "summary": "Get NFT owners by contract",
    "description": "Get owners of NFTs for a given contract.\n* Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.",
    "method": "GET",
    "path": "/nft/:address/owners",
    "pathParams": [
      {
        "name": "address",
        "description": "The address of the NFT contract",
        "required": true,
        "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB",
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "chain",
        "description": "The chain to query",
        "required": false,
        "example": "eth",
        "type": "string",
        "enum": [
          "eth",
          "0x1",
          "goerli",
          "0x5",
          "sepolia",
          "0xaa36a7",
          "polygon",
          "0x89",
          "mumbai",
          "0x13881",
          "bsc",
          "0x38",
          "bsc testnet",
          "0x61",
          "avalanche",
          "0xa86a",
          "avalanche testnet",
          "0xa869",
          "fantom",
          "0xfa",
          "palm",
          "0x2a15c308d",
          "cronos",
          "0x19",
          "cronos testnet",
          "0x152",
          "arbitrum",
          "0xa4b1"
        ]
      },
      {
        "name": "format",
        "description": "The format of the token ID",
        "required": false,
        "example": "decimal",
        "type": "string"
      },
      {
        "name": "limit",
        "description": "The desired page size of the result.",
        "required": false,
        "type": "number"
      },
      {
        "name": "disable_total",
        "description": "If the result should skip returning the total count (Improves performance).",
        "required": false,
        "type": "boolean"
      },
      {
        "name": "cursor",
        "description": "The cursor returned in the previous response (used for getting the next page). Learn more on cursor pagination [here](/web3-data-api/pagination).",
        "type": "string"
      },
      {
        "name": "normalizeMetadata",
        "description": "The option to enable metadata normalization. Learn more about metadata normalization [here](https://docs.moralis.io/web3-data-api/metadata-normalization/metadata-normalization).",
        "required": false,
        "type": "boolean"
      }
    ],
    "responses": [
      {
        "status": "200",
        "description": "Returns a collection of NFT owners",
        "body": {
          "type": "object",
          "fields": [
            {
              "name": "status",
              "type": "string",
              "description": "The syncing status of the address [SYNCING/SYNCED]",
              "example": "SYNCING"
            },
            {
              "name": "total",
              "type": "number",
              "description": "The total number of matches for this query",
              "example": "2000"
            },
            {
              "name": "page",
              "type": "number",
              "description": "The current page of the result",
              "example": "2"
            },
            {
              "name": "page_size",
              "type": "number",
              "description": "The number of results per page",
              "example": "100"
            },
            {
              "name": "cursor",
              "description": "The cursor returned in the previous response (used for getting the next page). Learn more on cursor pagination [here](/web3-data-api/pagination).",
              "type": "string"
            },
            {
              "name": "result",
              "type": "object",
              "fields": [
                {
                  "name": "token_address",
                  "type": "string",
                  "description": "The address of the NFT contract",
                  "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB"
                },
                {
                  "name": "token_id",
                  "type": "string",
                  "description": "The token ID of the NFT",
                  "example": "15"
                },
                {
                  "name": "contract_type",
                  "type": "string",
                  "description": "The type of NFT contract standard",
                  "example": "ERC721"
                },
                {
                  "name": "owner_of",
                  "type": "string",
                  "description": "The wallet address of the owner of the NFT",
                  "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                },
                {
                  "name": "block_number",
                  "type": "string",
                  "description": "The block number when the amount or owner changed",
                  "example": "88256"
                },
                {
                  "name": "block_number_minted",
                  "type": "string",
                  "description": "The block number when the NFT was minted",
                  "example": "88256"
                },
                {
                  "name": "token_uri",
                  "type": "string",
                  "description": "The URI to the metadata of the token"
                },
                {
                  "name": "metadata",
                  "type": "string",
                  "description": "The metadata of the token"
                },
                {
                  "name": "normalized_metadata",
                  "description": "A normalized metadata version of the NFT's metadata.",
                  "type": "object",
                  "fields": [
                    {
                      "name": "name",
                      "type": "string",
                      "description": "The name or title of the NFT",
                      "example": "Moralis Mug"
                    },
                    {
                      "name": "description",
                      "type": "string",
                      "description": "A detailed description of the NFT",
                      "example": "Moralis Coffee nug 3D Asset that can be used in 3D worldspaces. This NFT is presented as a flat PNG, a Unity3D Prefab and a standard fbx."
                    },
                    {
                      "name": "image",
                      "type": "string",
                      "description": "The URL of the NFT's image",
                      "example": "https://arw2wxg84h6b.moralishost.com:2053/server/files/tNJatzsHirx4V2VAep6sc923OYGxvkpBeJttR7Ks/de504bbadadcbe30c86278342fcf2560_moralismug.png"
                    },
                    {
                      "name": "external_link",
                      "type": "string",
                      "description": "A link to additional information",
                      "example": "https://giphy.com/gifs/loop-recursion-ting-aaODAv1iuQdgI"
                    },
                    {
                      "name": "animation_url",
                      "type": "string",
                      "description": "An animated version of the NFT's image",
                      "example": "https://giphy.com/gifs/food-design-donuts-o9ngTPVYW4qo8"
                    },
                    {
                      "name": "attributes",
                      "type": "array",
                      "field": {
                        "type": "object",
                        "fields": [
                          {
                            "name": "trait_type",
                            "type": "string",
                            "description": "The trait title or descriptor",
                            "example": "Eye Color"
                          },
                          {
                            "name": "value",
                            "type": "string",
                            "description": "The value of the attribute",
                            "example": "hazel"
                          },
                          {
                            "name": "display_type",
                            "type": "string",
                            "description": "The type the attribute value should be displayed as",
                            "example": "string"
                          },
                          {
                            "name": "max_value",
                            "type": "number",
                            "description": "For numeric values, the upper range",
                            "example": 100
                          },
                          {
                            "name": "trait_count",
                            "type": "number",
                            "description": "The number of possible values for this trait",
                            "example": 7
                          },
                          {
                            "name": "order",
                            "type": "number",
                            "description": "Order the trait should appear in the attribute list.",
                            "example": 1
                          }
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "media_links",
                  "description": "A set of links to 'thumbnail / preview' media files",
                  "type": "object",
                  "fields": [
                    {
                      "name": "mimetype",
                      "type": "string",
                      "required": true,
                      "description": "The mimetype of the media file [see https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types]"
                    },
                    {
                      "name": "category",
                      "type": "string",
                      "required": true,
                      "enum": ["image", "audio", "video"]
                    },
                    {
                      "name": "original_media_url",
                      "type": "string",
                      "required": true,
                      "description": "The url of the original media file."
                    },
                    {
                      "name": "parent_hash",
                      "type": "string",
                      "required": true,
                      "description": "Hash value of the original media file."
                    },
                    {
                      "name": "media_collection",
                      "required": true,
                      "description": "Preview item associated with the original",
                      "type": "object",
                      "fields": [
                        {
                          "name": "original",
                          "required": true,
                          "description": "Information about the original media file",
                          "type": "object",
                          "fields": [
                            {
                              "name": "width",
                              "type": "integer",
                              "description": "The width of the preview image.",
                              "required": true
                            },
                            {
                              "name": "height",
                              "type": "integer",
                              "description": "The height of the preview image.",
                              "required": true
                            },
                            {
                              "name": "url",
                              "type": "string",
                              "description": "The url of the preview file.",
                              "required": true
                            }
                          ]
                        },
                        {
                          "name": "low",
                          "required": true,
                          "description": "Preview media file, lowest quality (for images 100px x 100px)",
                          "type": "object",
                          "fields": [
                            {
                              "name": "width",
                              "type": "integer",
                              "description": "The width of the preview image.",
                              "required": true
                            },
                            {
                              "name": "height",
                              "type": "integer",
                              "description": "The height of the preview image.",
                              "required": true
                            },
                            {
                              "name": "url",
                              "type": "string",
                              "description": "The url of the preview file.",
                              "required": true
                            }
                          ]
                        },
                        {
                          "name": "medium",
                          "required": true,
                          "description": "Preview media file, medium quality (for images 250px x 250px)",
                          "type": "object",
                          "fields": [
                            {
                              "name": "width",
                              "type": "integer",
                              "description": "The width of the preview image.",
                              "required": true
                            },
                            {
                              "name": "height",
                              "type": "integer",
                              "description": "The height of the preview image.",
                              "required": true
                            },
                            {
                              "name": "url",
                              "type": "string",
                              "description": "The url of the preview file.",
                              "required": true
                            }
                          ]
                        },
                        {
                          "name": "high",
                          "required": true,
                          "description": "Preview media file, highest quality (for images 500px x 500px)",
                          "type": "object",
                          "fields": [
                            {
                              "name": "width",
                              "type": "integer",
                              "description": "The width of the preview image.",
                              "required": true
                            },
                            {
                              "name": "height",
                              "type": "integer",
                              "description": "The height of the preview image.",
                              "required": true
                            },
                            {
                              "name": "url",
                              "type": "string",
                              "description": "The url of the preview file.",
                              "required": true
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "amount",
                  "type": "string",
                  "description": "The number of this item the user owns (used by ERC1155)",
                  "example": "1"
                },
                {
                  "name": "name",
                  "type": "string",
                  "description": "The name of the NFT contract",
                  "example": "CryptoKitties"
                },
                {
                  "name": "symbol",
                  "type": "string",
                  "description": "The symbol of the NFT contract",
                  "example": "RARI"
                },
                {
                  "name": "token_hash",
                  "type": "string",
                  "description": "The token hash",
                  "example": "502cee781b0fb40ea02508b21d319ced"
                },
                {
                  "name": "last_token_uri_sync",
                  "type": "string",
                  "description": "When the token_uri was last updated",
                  "example": "2021-02-24T00:47:26.647Z"
                },
                {
                  "name": "last_metadata_sync",
                  "type": "string",
                  "description": "When the metadata was last updated",
                  "example": "2021-02-24T00:47:26.647Z"
                }
              ]
            }
          ]
        }
      }
    ],
    "codeSamples": [
      {
        "language": "node",
        "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const chain = EvmChain.ETHEREUM;\n\n    const address = '0x1234567890123456789012345678901234567890';\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.nft.getNFTOwners({\n        address,\n        chain,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
        "name": "Moralis NodeJS SDK"
      },
      {
        "language": "csharp",
        "code": "private async Task<bool> GetNFTOwners(IWeb3Api web3Api)\n{\n    bool result = true;\n     try\n    {\n        NftOwnerCollection resp = await web3Api.Token.GetNFTOwners(\"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", ChainList.eth, null, \"\", 10);\n         result = resp is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n     return result;\n}\n        ",
        "name": "Moralis C# SDK"
      },
      {
        "language": "python",
        "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\", \n    \"chain\": \"eth\", \n    \"format\": \"decimal\", \n    \"limit\": 0, \n    \"disable_total\": True, \n    \"cursor\": \"\", \n    \"normalizeMetadata\": True, \n}\n\nresult = evm_api.nft.get_nft_owners(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
      }
    ]
  },
  "getNFTContractTransfers": {
    "apiHost": "https://deep-index.moralis.io/api/v2",
    "summary": "Get NFT transfers by contract",
    "description": "Get transfers of NFTs for a given contract and other parameters.",
    "method": "GET",
    "path": "/nft/:address/transfers",
    "pathParams": [
      {
        "name": "address",
        "description": "The address of the NFT contract",
        "required": true,
        "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB",
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "chain",
        "description": "The chain to query",
        "required": false,
        "example": "eth",
        "type": "string",
        "enum": [
          "eth",
          "0x1",
          "goerli",
          "0x5",
          "sepolia",
          "0xaa36a7",
          "polygon",
          "0x89",
          "mumbai",
          "0x13881",
          "bsc",
          "0x38",
          "bsc testnet",
          "0x61",
          "avalanche",
          "0xa86a",
          "avalanche testnet",
          "0xa869",
          "fantom",
          "0xfa",
          "palm",
          "0x2a15c308d",
          "cronos",
          "0x19",
          "cronos testnet",
          "0x152",
          "arbitrum",
          "0xa4b1"
        ]
      },
      {
        "name": "from_block",
        "description": "The minimum block number from where to get the transfers\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
        "required": false,
        "type": "number"
      },
      {
        "name": "to_block",
        "description": "The maximum block number from where to get the transfers.\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
        "required": false,
        "type": "number"
      },
      {
        "name": "from_date",
        "description": "The date from where to get the transfers (any format that is accepted by momentjs)\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
        "required": false,
        "type": "string"
      },
      {
        "name": "to_date",
        "description": "Get transfers up until this date (any format that is accepted by momentjs)\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
        "required": false,
        "type": "string"
      },
      {
        "name": "format",
        "description": "The format of the token ID",
        "required": false,
        "example": "decimal",
        "type": "string"
      },
      {
        "name": "limit",
        "description": "The desired page size of the result.",
        "required": false,
        "type": "number"
      },
      {
        "name": "disable_total",
        "description": "If the result should skip returning the total count (Improves performance).",
        "required": false,
        "type": "boolean"
      },
      {
        "name": "cursor",
        "description": "The cursor returned in the previous response (used for getting the next page).",
        "type": "string"
      }
    ],
    "responses": [
      {
        "status": "200",
        "description": "Returns a collection of NFT transfers",
        "body": {
          "type": "object",
          "fields": [
            {
              "name": "total",
              "type": "number",
              "description": "The total number of matches for this query",
              "example": "2000"
            },
            {
              "name": "page",
              "type": "number",
              "description": "The current page of the result",
              "example": "2"
            },
            {
              "name": "page_size",
              "type": "number",
              "description": "The number of results per page",
              "example": "100"
            },
            {
              "name": "cursor",
              "description": "The cursor returned in the previous response (used for getting the next page). Learn more on cursor pagination [here](/web3-data-api/pagination).",
              "type": "string"
            },
            {
              "name": "result",
              "type": "object",
              "fields": [
                {
                  "name": "token_address",
                  "type": "string",
                  "description": "The address of the NFT contract",
                  "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                },
                {
                  "name": "token_id",
                  "type": "string",
                  "description": "The token ID of the NFT",
                  "example": "15"
                },
                {
                  "name": "from_address",
                  "type": "string",
                  "description": "The address that sent the NFT",
                  "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                },
                {
                  "name": "to_address",
                  "type": "string",
                  "description": "The address that received the NFT",
                  "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "The value that was sent in the transaction (ETH/BNB/etc..)",
                  "example": "1000000000000000"
                },
                {
                  "name": "amount",
                  "type": "string",
                  "description": "The number of tokens transferred",
                  "example": "1"
                },
                {
                  "name": "contract_type",
                  "type": "string",
                  "description": "The type of NFT contract standard",
                  "example": "ERC721"
                },
                {
                  "name": "block_number",
                  "type": "string",
                  "description": "The block number of the transaction",
                  "example": "88256"
                },
                {
                  "name": "block_timestamp",
                  "type": "string",
                  "description": "The block timestamp",
                  "example": "2021-06-04T16:00:15"
                },
                {
                  "name": "block_hash",
                  "type": "string",
                  "description": "The block hash of the transaction"
                },
                {
                  "name": "transaction_hash",
                  "type": "string",
                  "description": "The transaction hash",
                  "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                },
                {
                  "name": "transaction_type",
                  "type": "string",
                  "description": "The transaction type"
                },
                {
                  "name": "transaction_index",
                  "type": "number",
                  "description": "The transaction index"
                },
                {
                  "name": "log_index",
                  "type": "number",
                  "description": "The log index"
                },
                {
                  "name": "operator",
                  "type": "string",
                  "description": "The operator present only for ERC1155 transfers",
                  "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                }
              ]
            },
            {
              "name": "block_exists",
              "type": "boolean",
              "description": "Indicator if the block exists",
              "example": true
            },
            {
              "name": "index_complete",
              "type": "boolean",
              "description": "Indicator if the block is fully indexed",
              "example": true
            }
          ]
        }
      }
    ],
    "codeSamples": [
      {
        "language": "node",
        "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const chain = EvmChain.ETHEREUM;\n\n    const address = '0x1234567890123456789012345678901234567890';\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.nft.getNFTContractTransfers({\n        address,\n        chain,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
        "name": "Moralis NodeJS SDK"
      },
      {
        "language": "csharp",
        "code": "private async Task<bool> GetContractNFTTransfers(IWeb3Api web3Api)\n{\n    bool result = true;\n     try\n    {\n        NftTransferCollection resp = await web3Api.Token.GetContractNFTTransfers(\"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", ChainList.eth, null, \"\", 10);\n         result = resp is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n     return result;\n}\n        ",
        "name": "Moralis C# SDK"
      },
      {
        "language": "python",
        "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\", \n    \"chain\": \"eth\", \n    \"format\": \"decimal\", \n    \"limit\": 0, \n    \"cursor\": \"\", \n}\n\nresult = evm_api.nft.get_nft_contract_transfers(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
      }
    ]
  },
  "getNFTTransfersFromToBlock": {
    "apiHost": "https://deep-index.moralis.io/api/v2",
    "summary": "Get NFT transfers from a block to a block",
    "description": "Get transfers of NFTs from a block number to a block number.",
    "method": "GET",
    "path": "/nft/transfers",
    "pathParams": [],
    "queryParams": [
      {
        "name": "chain",
        "description": "The chain to query",
        "required": false,
        "example": "eth",
        "type": "string",
        "enum": [
          "eth",
          "0x1",
          "goerli",
          "0x5",
          "sepolia",
          "0xaa36a7",
          "polygon",
          "0x89",
          "mumbai",
          "0x13881",
          "bsc",
          "0x38",
          "bsc testnet",
          "0x61",
          "avalanche",
          "0xa86a",
          "avalanche testnet",
          "0xa869",
          "fantom",
          "0xfa",
          "palm",
          "0x2a15c308d",
          "cronos",
          "0x19",
          "cronos testnet",
          "0x152",
          "arbitrum",
          "0xa4b1"
        ]
      },
      {
        "name": "from_block",
        "description": "The minimum block number from which to get the transfers\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
        "required": false,
        "type": "number",
        "example": 16424191
      },
      {
        "name": "to_block",
        "description": "The maximum block number from which to get the transfers.\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
        "required": false,
        "type": "number"
      },
      {
        "name": "from_date",
        "description": "The start date from which to get the transfers (any format that is accepted by momentjs)\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
        "required": false,
        "type": "string"
      },
      {
        "name": "to_date",
        "description": "The end date from which to get the transfers (any format that is accepted by momentjs)\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
        "required": false,
        "type": "string"
      },
      {
        "name": "format",
        "description": "The format of the token ID",
        "required": false,
        "example": "decimal",
        "type": "string"
      },
      {
        "name": "limit",
        "description": "The desired page size of the result.",
        "required": false,
        "type": "number"
      },
      {
        "name": "disable_total",
        "description": "If the result should skip returning the total count (Improves performance).",
        "required": false,
        "type": "boolean"
      },
      {
        "name": "cursor",
        "description": "The cursor returned in the previous response (for getting the next page)\n",
        "type": "string"
      }
    ],
    "responses": [
      {
        "status": "200",
        "description": "Returns a collection of NFT transfers",
        "body": {
          "type": "object",
          "fields": [
            {
              "name": "total",
              "type": "number",
              "description": "The total number of matches for this query",
              "example": "2000"
            },
            {
              "name": "page",
              "type": "number",
              "description": "The current page of the result",
              "example": "2"
            },
            {
              "name": "page_size",
              "type": "number",
              "description": "The number of results per page",
              "example": "100"
            },
            {
              "name": "cursor",
              "description": "The cursor returned in the previous response (used for getting the next page). Learn more on cursor pagination [here](/web3-data-api/pagination).",
              "type": "string"
            },
            {
              "name": "result",
              "type": "object",
              "fields": [
                {
                  "name": "token_address",
                  "type": "string",
                  "description": "The address of the NFT contract",
                  "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                },
                {
                  "name": "token_id",
                  "type": "string",
                  "description": "The token ID of the NFT",
                  "example": "15"
                },
                {
                  "name": "from_address",
                  "type": "string",
                  "description": "The address that sent the NFT",
                  "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                },
                {
                  "name": "to_address",
                  "type": "string",
                  "description": "The address that received the NFT",
                  "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "The value that was sent in the transaction (ETH/BNB/etc..)",
                  "example": "1000000000000000"
                },
                {
                  "name": "amount",
                  "type": "string",
                  "description": "The number of tokens transferred",
                  "example": "1"
                },
                {
                  "name": "contract_type",
                  "type": "string",
                  "description": "The type of NFT contract standard",
                  "example": "ERC721"
                },
                {
                  "name": "block_number",
                  "type": "string",
                  "description": "The block number of the transaction",
                  "example": "88256"
                },
                {
                  "name": "block_timestamp",
                  "type": "string",
                  "description": "The block timestamp",
                  "example": "2021-06-04T16:00:15"
                },
                {
                  "name": "block_hash",
                  "type": "string",
                  "description": "The block hash of the transaction"
                },
                {
                  "name": "transaction_hash",
                  "type": "string",
                  "description": "The transaction hash",
                  "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                },
                {
                  "name": "transaction_type",
                  "type": "string",
                  "description": "The transaction type"
                },
                {
                  "name": "transaction_index",
                  "type": "number",
                  "description": "The transaction index"
                },
                {
                  "name": "log_index",
                  "type": "number",
                  "description": "The log index"
                },
                {
                  "name": "operator",
                  "type": "string",
                  "description": "The operator present only for ERC1155 transfers",
                  "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                }
              ]
            },
            {
              "name": "block_exists",
              "type": "boolean",
              "description": "Indicator if the block exists",
              "example": true
            },
            {
              "name": "index_complete",
              "type": "boolean",
              "description": "Indicator if the block is fully indexed",
              "example": true
            }
          ]
        }
      }
    ],
    "codeSamples": [
      {
        "language": "node",
        "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const chain = EvmChain.ETHEREUM;\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.nft.getNFTTransfersFromToBlock({\n        from_block: \"14876000\",\n        to_block: \"14877000\",\n        format: \"decimal\",\n        limit: \"10\",\n        chain,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
        "name": "Moralis NodeJS SDK"
      },
      {
        "language": "csharp",
        "code": "private async Task<bool> GetNftTransfersFromToBlock(IWeb3Api web3Api)\n{\n    bool result = true;\n     try\n    {\n        // Fails same in Admin Consel - Invalid HEX values\n        NftTransferCollection resp = await web3Api.Token.GetNftTransfersFromToBlock(ChainList.eth, \"\", 99999, 25999999, null, null, null, 10);\n         result = resp is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n     return result;\n}\n        ",
        "name": "Moralis C# SDK"
      },
      {
        "language": "python",
        "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"chain\": \"eth\", \n    \"from_block\": 0, \n    \"to_block\": 0, \n    \"from_date\": \"\", \n    \"to_date\": \"\", \n    \"format\": \"decimal\", \n    \"limit\": 0, \n    \"cursor\": \"\", \n}\n\nresult = evm_api.nft.get_nft_transfers_from_to_block(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
      }
    ]
  },
  "getNFTTransfersByBlock": {
    "apiHost": "https://deep-index.moralis.io/api/v2",
    "summary": "Get NFT transfers by block",
    "description": "Get transfers of NFTs given a block number or block hash.",
    "method": "GET",
    "path": "/block/:block_number_or_hash/nft/transfers",
    "pathParams": [
      {
        "name": "block_number_or_hash",
        "description": "The block number or block hash",
        "required": true,
        "example": "15846571",
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "chain",
        "description": "The chain to query",
        "required": false,
        "example": "eth",
        "type": "string",
        "enum": [
          "eth",
          "0x1",
          "goerli",
          "0x5",
          "sepolia",
          "0xaa36a7",
          "polygon",
          "0x89",
          "mumbai",
          "0x13881",
          "bsc",
          "0x38",
          "bsc testnet",
          "0x61",
          "avalanche",
          "0xa86a",
          "avalanche testnet",
          "0xa869",
          "fantom",
          "0xfa",
          "palm",
          "0x2a15c308d",
          "cronos",
          "0x19",
          "cronos testnet",
          "0x152",
          "arbitrum",
          "0xa4b1"
        ]
      },
      {
        "name": "limit",
        "description": "The desired page size of the result.",
        "required": false,
        "type": "number"
      },
      {
        "name": "disable_total",
        "description": "If the result should skip returning the total count (Improves performance).",
        "required": false,
        "type": "boolean"
      },
      {
        "name": "cursor",
        "description": "The cursor returned in the previous response (used for getting the next page). Learn more on cursor pagination [here](/web3-data-api/pagination).",
        "type": "string"
      }
    ],
    "responses": [
      {
        "status": "200",
        "description": "Returns the contents of a block",
        "body": {
          "type": "object",
          "fields": [
            {
              "name": "total",
              "type": "number",
              "description": "The total number of matches for this query",
              "example": "2000"
            },
            {
              "name": "page",
              "type": "number",
              "description": "The current page of the result",
              "example": "2"
            },
            {
              "name": "page_size",
              "type": "number",
              "description": "The number of results per page",
              "example": "100"
            },
            {
              "name": "cursor",
              "description": "The cursor returned in the previous response (used for getting the next page). Learn more on cursor pagination [here](/web3-data-api/pagination).",
              "type": "string"
            },
            {
              "name": "result",
              "type": "object",
              "fields": [
                {
                  "name": "token_address",
                  "type": "string",
                  "description": "The address of the NFT contract",
                  "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                },
                {
                  "name": "token_id",
                  "type": "string",
                  "description": "The token ID of the NFT",
                  "example": "15"
                },
                {
                  "name": "from_address",
                  "type": "string",
                  "description": "The address that sent the NFT",
                  "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                },
                {
                  "name": "to_address",
                  "type": "string",
                  "description": "The address that received the NFT",
                  "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "The value that was sent in the transaction (ETH/BNB/etc..)",
                  "example": "1000000000000000"
                },
                {
                  "name": "amount",
                  "type": "string",
                  "description": "The number of tokens transferred",
                  "example": "1"
                },
                {
                  "name": "contract_type",
                  "type": "string",
                  "description": "The type of NFT contract standard",
                  "example": "ERC721"
                },
                {
                  "name": "block_number",
                  "type": "string",
                  "description": "The block number of the transaction",
                  "example": "88256"
                },
                {
                  "name": "block_timestamp",
                  "type": "string",
                  "description": "The block timestamp",
                  "example": "2021-06-04T16:00:15"
                },
                {
                  "name": "block_hash",
                  "type": "string",
                  "description": "The block hash of the transaction"
                },
                {
                  "name": "transaction_hash",
                  "type": "string",
                  "description": "The transaction hash",
                  "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                },
                {
                  "name": "transaction_type",
                  "type": "string",
                  "description": "The transaction type"
                },
                {
                  "name": "transaction_index",
                  "type": "number",
                  "description": "The transaction index"
                },
                {
                  "name": "log_index",
                  "type": "number",
                  "description": "The log index"
                },
                {
                  "name": "operator",
                  "type": "string",
                  "description": "The operator present only for ERC1155 transfers",
                  "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                }
              ]
            },
            {
              "name": "block_exists",
              "type": "boolean",
              "description": "Indicator if the block exists",
              "example": true
            },
            {
              "name": "index_complete",
              "type": "boolean",
              "description": "Indicator if the block is fully indexed",
              "example": true
            }
          ]
        }
      }
    ],
    "codeSamples": [
      {
        "language": "node",
        "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const chain = EvmChain.ETHEREUM;\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.nft.getNFTTransfersByBlock({\n        blockNumberOrHash,\n        chain,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
        "name": "Moralis NodeJS SDK"
      },
      {
        "language": "csharp",
        "code": "private async Task<bool> GetNFTTransfersByBlock(IWeb3Api web3Api)\n{\n    bool result = true;\n     try\n    {\n        NftTransferCollection nftTransfers = await web3Api.Native.GetNFTTransfersByBlock(\"500000\", ChainList.eth);\n         result = nftTransfers is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n     return result;\n}\n        ",
        "name": "Moralis C# SDK"
      },
      {
        "language": "python",
        "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"block_number_or_hash\": \"15846571\", \n    \"chain\": \"eth\", \n    \"limit\": 0, \n    \"cursor\": \"\", \n}\n\nresult = evm_api.nft.get_nft_transfers_by_block(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
      }
    ]
  },
  "getNFTTrades": {
    "apiHost": "https://deep-index.moralis.io/api/v2",
    "summary": "Get NFT trades by marketplace",
    "description": "Get trades of NFTs for a given contract and marketplace.",
    "method": "GET",
    "path": "/nft/:address/trades",
    "pathParams": [
      {
        "name": "address",
        "description": "The address of the NFT contract",
        "required": true,
        "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB",
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "chain",
        "description": "The chain to query",
        "required": false,
        "example": "eth",
        "type": "string",
        "enum": [
          "eth",
          "0x1",
          "goerli",
          "0x5",
          "sepolia",
          "0xaa36a7",
          "polygon",
          "0x89",
          "mumbai",
          "0x13881",
          "bsc",
          "0x38",
          "bsc testnet",
          "0x61",
          "avalanche",
          "0xa86a",
          "avalanche testnet",
          "0xa869",
          "fantom",
          "0xfa",
          "palm",
          "0x2a15c308d",
          "cronos",
          "0x19",
          "cronos testnet",
          "0x152",
          "arbitrum",
          "0xa4b1"
        ]
      },
      {
        "name": "from_block",
        "description": "The minimum block number from which to get the transfers\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
        "required": false,
        "type": "number"
      },
      {
        "name": "to_block",
        "description": "The block number to get the trades from",
        "required": false,
        "type": "string"
      },
      {
        "name": "from_date",
        "description": "The start date from which to get the transfers (any format that is accepted by momentjs)\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
        "required": false,
        "type": "string"
      },
      {
        "name": "to_date",
        "description": "The end date from which to get the transfers (any format that is accepted by momentjs)\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
        "required": false,
        "type": "string"
      },
      {
        "name": "marketplace",
        "description": "Marketplace from which to get the trades (only OpenSea is supported at the moment)",
        "required": false,
        "example": "opensea",
        "type": "string"
      },
      {
        "name": "cursor",
        "description": "The cursor returned in the previous response (used for getting the next page). Learn more on cursor pagination [here](/web3-data-api/pagination).",
        "type": "string",
        "required": false
      },
      {
        "name": "limit",
        "description": "The desired page size of the result.",
        "required": false,
        "type": "number"
      },
      {
        "name": "disable_total",
        "description": "If the result should skip returning the total count (Improves performance).",
        "required": false,
        "type": "boolean"
      }
    ],
    "responses": [
      {
        "status": "200",
        "description": "Returns the trades",
        "body": {
          "type": "object",
          "fields": [
            {
              "name": "total",
              "type": "number",
              "description": "The total number of matches for this query",
              "example": "2000"
            },
            {
              "name": "page",
              "type": "number",
              "description": "The current page of the result",
              "example": "2"
            },
            {
              "name": "page_size",
              "type": "number",
              "description": "The number of results per page",
              "example": "100"
            },
            {
              "name": "result",
              "type": "object",
              "fields": [
                {
                  "name": "transaction_hash",
                  "type": "string",
                  "description": "The transaction hash",
                  "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                },
                {
                  "name": "transaction_index",
                  "type": "string",
                  "description": "The transaction index"
                },
                {
                  "name": "token_ids",
                  "type": "array",
                  "description": "The token ID(s) traded",
                  "example": ["15", "54"],
                  "field": { "type": "string", "example": "15" }
                },
                {
                  "name": "seller_address",
                  "type": "string",
                  "description": "The address that sold the NFT",
                  "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                },
                {
                  "name": "buyer_address",
                  "type": "string",
                  "description": "The address that bought the NFT",
                  "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                },
                {
                  "name": "marketplace_address",
                  "type": "string",
                  "description": "The address of the contract that traded the NFT",
                  "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                },
                {
                  "name": "price",
                  "type": "string",
                  "description": "The value that was sent in the transaction (ETH/BNB/etc..)",
                  "example": "1000000000000000"
                },
                {
                  "name": "block_timestamp",
                  "type": "string",
                  "description": "The block timestamp",
                  "example": "2021-06-04T16:00:15"
                },
                {
                  "name": "block_number",
                  "type": "string",
                  "description": "The block number of the transaction",
                  "example": "13680123"
                },
                {
                  "name": "block_hash",
                  "type": "string",
                  "description": "The block hash",
                  "example": "0x4a7c916ca4a970358b9df90051008f729685ff05e9724a9dddba32630c37cb96"
                }
              ]
            }
          ]
        }
      }
    ],
    "codeSamples": [
      {
        "language": "node",
        "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const chain = EvmChain.ETHEREUM;\n\n    const address = '0x1234567890123456789012345678901234567890';\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.nft.getNFTTrades({\n        address,\n        chain,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
        "name": "Moralis NodeJS SDK"
      },
      {
        "language": "csharp",
        "code": "private async Task<bool> GetNFTTrades(IWeb3Api web3Api)\n{\n    bool result = true;\n    try\n    {\n        TradeCollection resp = await web3Api.Token.GetNFTTrades(\"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", ChainList.eth, null, null, null, null, null, null, \"\", 10);\n        result = resp is { };\n    }\n    catch (Exception exp) { result = false; }\n    return result;\n}\n        ",
        "name": "Moralis C# SDK"
      },
      {
        "language": "python",
        "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\", \n    \"chain\": \"eth\", \n    \"from_block\": 0, \n    \"to_block\": \"\", \n    \"from_date\": \"\", \n    \"to_date\": \"\", \n    \"marketplace\": \"opensea\", \n    \"cursor\": \"\", \n    \"limit\": 0, \n}\n\nresult = evm_api.nft.get_nft_trades(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
      }
    ]
  },
  "getNFTContractMetadata": {
    "apiHost": "https://deep-index.moralis.io/api/v2",
    "summary": "Get NFT collection metadata",
    "description": "Get the collection / contract level metadata for a given contract (name, symbol, and contract type).\n* Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n",
    "method": "GET",
    "path": "/nft/:address/metadata",
    "pathParams": [
      {
        "name": "address",
        "description": "The address of the NFT contract",
        "required": true,
        "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB",
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "chain",
        "description": "The chain to query",
        "required": false,
        "example": "eth",
        "type": "string",
        "enum": [
          "eth",
          "0x1",
          "goerli",
          "0x5",
          "sepolia",
          "0xaa36a7",
          "polygon",
          "0x89",
          "mumbai",
          "0x13881",
          "bsc",
          "0x38",
          "bsc testnet",
          "0x61",
          "avalanche",
          "0xa86a",
          "avalanche testnet",
          "0xa869",
          "fantom",
          "0xfa",
          "palm",
          "0x2a15c308d",
          "cronos",
          "0x19",
          "cronos testnet",
          "0x152",
          "arbitrum",
          "0xa4b1"
        ]
      }
    ],
    "responses": [
      {
        "status": "200",
        "description": "Returns the metadata for an NFT collection.",
        "body": {
          "type": "object",
          "fields": [
            {
              "name": "token_address",
              "type": "string",
              "description": "The address of the token contract",
              "example": "0x2d30ca6f024dbc1307ac8a1a44ca27de6f797ec22ef20627a1307243b0ab7d09"
            },
            {
              "name": "name",
              "type": "string",
              "description": "The name of the token contract",
              "example": "KryptoKitties"
            },
            {
              "name": "synced_at",
              "type": "string",
              "description": "Timestamp of when the contract was last synced with the node"
            },
            {
              "name": "symbol",
              "type": "string",
              "description": "The symbol of the NFT contract",
              "example": "RARI"
            },
            {
              "name": "contract_type",
              "type": "string",
              "description": "The type of NFT contract",
              "example": "ERC721"
            }
          ]
        }
      }
    ],
    "codeSamples": [
      {
        "language": "node",
        "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const chain = EvmChain.ETHEREUM;\n\n    const address = '0x1234567890123456789012345678901234567890';\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.nft.getNFTContractMetadata({\n        address,\n        chain,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
        "name": "Moralis NodeJS SDK"
      },
      {
        "language": "csharp",
        "code": "private async Task<bool> GetNFTMetadata(IWeb3Api web3Api)\n{\n    bool result = true;\n     try\n    {\n        NftContractMetadata resp = await web3Api.Token.GetNFTMetadata(\"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", ChainList.eth);\n         result = resp is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n     return result;\n}\n        ",
        "name": "Moralis C# SDK"
      },
      {
        "language": "python",
        "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\", \n    \"chain\": \"eth\", \n}\n\nresult = evm_api.nft.get_nft_contract_metadata(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
      }
    ]
  },
  "getNFTMetadata": {
    "apiHost": "https://deep-index.moralis.io/api/v2",
    "summary": "Get NFT metadata",
    "description": "Get NFT data, including metadata (where available), for the given NFT token ID and contract address.\n* Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n",
    "method": "GET",
    "path": "/nft/:address/:token_id",
    "pathParams": [
      {
        "name": "address",
        "description": "The address of the NFT contract",
        "required": true,
        "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB",
        "type": "string"
      },
      {
        "name": "token_id",
        "description": "The ID of the token",
        "required": true,
        "example": "1",
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "chain",
        "description": "The chain to query",
        "required": false,
        "example": "eth",
        "type": "string",
        "enum": [
          "eth",
          "0x1",
          "goerli",
          "0x5",
          "sepolia",
          "0xaa36a7",
          "polygon",
          "0x89",
          "mumbai",
          "0x13881",
          "bsc",
          "0x38",
          "bsc testnet",
          "0x61",
          "avalanche",
          "0xa86a",
          "avalanche testnet",
          "0xa869",
          "fantom",
          "0xfa",
          "palm",
          "0x2a15c308d",
          "cronos",
          "0x19",
          "cronos testnet",
          "0x152",
          "arbitrum",
          "0xa4b1"
        ]
      },
      {
        "name": "format",
        "description": "The format of the token ID",
        "required": false,
        "example": "decimal",
        "type": "string"
      },
      {
        "name": "normalizeMetadata",
        "description": "The option to enable metadata normalization. Learn more about metadata normalization [here](https://docs.moralis.io/web3-data-api/metadata-normalization/metadata-normalization).",
        "required": false,
        "type": "boolean"
      }
    ],
    "responses": [
      {
        "status": "200",
        "description": "Returns the specified NFT.",
        "body": {
          "type": "object",
          "fields": [
            {
              "name": "token_address",
              "type": "string",
              "description": "The address of the NFT contract",
              "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB"
            },
            {
              "name": "token_id",
              "type": "string",
              "description": "The token ID of the NFT",
              "example": "15"
            },
            {
              "name": "owner_of",
              "type": "string",
              "description": "The wallet address of the owner of the NFT",
              "example": "0x9c83ff0f1c8924da96cb2fcb7e093f78eb2e316b"
            },
            {
              "name": "token_hash",
              "type": "string",
              "description": "The token hash",
              "example": "502cee781b0fb40ea02508b21d319ced"
            },
            {
              "name": "block_number",
              "type": "string",
              "description": "The block number when the amount or owner changed",
              "example": "88256"
            },
            {
              "name": "block_number_minted",
              "type": "string",
              "description": "The block number when the NFT was minted",
              "example": "88256"
            },
            {
              "name": "contract_type",
              "type": "string",
              "description": "The type of NFT contract standard",
              "example": "ERC721"
            },
            {
              "name": "token_uri",
              "type": "string",
              "description": "The URI to the metadata of the token"
            },
            {
              "name": "metadata",
              "type": "string",
              "description": "The metadata of the token"
            },
            {
              "name": "normalized_metadata",
              "description": "A normalized metadata version of the NFT's metadata.",
              "type": "object",
              "fields": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "The name or title of the NFT",
                  "example": "Moralis Mug"
                },
                {
                  "name": "description",
                  "type": "string",
                  "description": "A detailed description of the NFT",
                  "example": "Moralis Coffee nug 3D Asset that can be used in 3D worldspaces. This NFT is presented as a flat PNG, a Unity3D Prefab and a standard fbx."
                },
                {
                  "name": "image",
                  "type": "string",
                  "description": "The URL of the NFT's image",
                  "example": "https://arw2wxg84h6b.moralishost.com:2053/server/files/tNJatzsHirx4V2VAep6sc923OYGxvkpBeJttR7Ks/de504bbadadcbe30c86278342fcf2560_moralismug.png"
                },
                {
                  "name": "external_link",
                  "type": "string",
                  "description": "A link to additional information",
                  "example": "https://giphy.com/gifs/loop-recursion-ting-aaODAv1iuQdgI"
                },
                {
                  "name": "animation_url",
                  "type": "string",
                  "description": "An animated version of the NFT's image",
                  "example": "https://giphy.com/gifs/food-design-donuts-o9ngTPVYW4qo8"
                },
                {
                  "name": "attributes",
                  "type": "array",
                  "field": {
                    "type": "object",
                    "fields": [
                      {
                        "name": "trait_type",
                        "type": "string",
                        "description": "The trait title or descriptor",
                        "example": "Eye Color"
                      },
                      {
                        "name": "value",
                        "type": "string",
                        "description": "The value of the attribute",
                        "example": "hazel"
                      },
                      {
                        "name": "display_type",
                        "type": "string",
                        "description": "The type the attribute value should be displayed as",
                        "example": "string"
                      },
                      {
                        "name": "max_value",
                        "type": "number",
                        "description": "For numeric values, the upper range",
                        "example": 100
                      },
                      {
                        "name": "trait_count",
                        "type": "number",
                        "description": "The number of possible values for this trait",
                        "example": 7
                      },
                      {
                        "name": "order",
                        "type": "number",
                        "description": "Order the trait should appear in the attribute list.",
                        "example": 1
                      }
                    ]
                  }
                }
              ]
            },
            {
              "name": "media_links",
              "description": "A set of links to 'thumbnail / preview' media files",
              "type": "object",
              "fields": [
                {
                  "name": "mimetype",
                  "type": "string",
                  "required": true,
                  "description": "The mimetype of the media file [see https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types]"
                },
                {
                  "name": "category",
                  "type": "string",
                  "required": true,
                  "enum": ["image", "audio", "video"]
                },
                {
                  "name": "original_media_url",
                  "type": "string",
                  "required": true,
                  "description": "The url of the original media file."
                },
                {
                  "name": "parent_hash",
                  "type": "string",
                  "required": true,
                  "description": "Hash value of the original media file."
                },
                {
                  "name": "media_collection",
                  "required": true,
                  "description": "Preview item associated with the original",
                  "type": "object",
                  "fields": [
                    {
                      "name": "original",
                      "required": true,
                      "description": "Information about the original media file",
                      "type": "object",
                      "fields": [
                        {
                          "name": "width",
                          "type": "integer",
                          "description": "The width of the preview image.",
                          "required": true
                        },
                        {
                          "name": "height",
                          "type": "integer",
                          "description": "The height of the preview image.",
                          "required": true
                        },
                        {
                          "name": "url",
                          "type": "string",
                          "description": "The url of the preview file.",
                          "required": true
                        }
                      ]
                    },
                    {
                      "name": "low",
                      "required": true,
                      "description": "Preview media file, lowest quality (for images 100px x 100px)",
                      "type": "object",
                      "fields": [
                        {
                          "name": "width",
                          "type": "integer",
                          "description": "The width of the preview image.",
                          "required": true
                        },
                        {
                          "name": "height",
                          "type": "integer",
                          "description": "The height of the preview image.",
                          "required": true
                        },
                        {
                          "name": "url",
                          "type": "string",
                          "description": "The url of the preview file.",
                          "required": true
                        }
                      ]
                    },
                    {
                      "name": "medium",
                      "required": true,
                      "description": "Preview media file, medium quality (for images 250px x 250px)",
                      "type": "object",
                      "fields": [
                        {
                          "name": "width",
                          "type": "integer",
                          "description": "The width of the preview image.",
                          "required": true
                        },
                        {
                          "name": "height",
                          "type": "integer",
                          "description": "The height of the preview image.",
                          "required": true
                        },
                        {
                          "name": "url",
                          "type": "string",
                          "description": "The url of the preview file.",
                          "required": true
                        }
                      ]
                    },
                    {
                      "name": "high",
                      "required": true,
                      "description": "Preview media file, highest quality (for images 500px x 500px)",
                      "type": "object",
                      "fields": [
                        {
                          "name": "width",
                          "type": "integer",
                          "description": "The width of the preview image.",
                          "required": true
                        },
                        {
                          "name": "height",
                          "type": "integer",
                          "description": "The height of the preview image.",
                          "required": true
                        },
                        {
                          "name": "url",
                          "type": "string",
                          "description": "The url of the preview file.",
                          "required": true
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "minter_address",
              "type": "string",
              "description": "The address that minted the NFT",
              "example": "0x9c83ff0f1c8924da96cb2fcb7e093f78eb2e316b"
            },
            {
              "name": "last_token_uri_sync",
              "type": "string",
              "description": "When the token_uri was last updated"
            },
            {
              "name": "last_metadata_sync",
              "type": "string",
              "description": "When the metadata was last updated"
            },
            {
              "name": "amount",
              "type": "string",
              "description": "The quantity of this item that the user owns (used by ERC1155)",
              "example": "1"
            },
            {
              "name": "name",
              "type": "string",
              "description": "The name of the NFT contract",
              "example": "CryptoKitties"
            },
            {
              "name": "symbol",
              "type": "string",
              "description": "The symbol of the NFT contract",
              "example": "RARI"
            }
          ]
        }
      }
    ],
    "codeSamples": [
      {
        "language": "node",
        "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const chain = EvmChain.ETHEREUM;\n\n    const address = '0x1234567890123456789012345678901234567890';\n\n    const tokenId = '1';\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.nft.getNFTMetadata({\n        address,\n        chain,\n        tokenId,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
        "name": "Moralis NodeJS SDK"
      },
      {
        "language": "csharp",
        "code": "private async Task<bool> GetTokenIdMetadata(IWeb3Api web3Api)\n{\n    bool result = true;\n     try\n    {\n        Nft resp = await web3Api.Token.GetTokenIdMetadata(\"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"10\", ChainList.eth);\n         result = resp is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n     return result;\n}\n        ",
        "name": "Moralis C# SDK"
      },
      {
        "language": "python",
        "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\", \n    \"token_id\": \"1\", \n    \"chain\": \"eth\", \n    \"format\": \"decimal\", \n    \"normalizeMetadata\": True, \n}\n\nresult = evm_api.nft.get_nft_metadata(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
      }
    ]
  },
  "getNFTTransfers": {
    "apiHost": "https://deep-index.moralis.io/api/v2",
    "summary": "Get NFT transfers by token ID",
    "description": "Get transfers of an NFT given a contract address and token ID.",
    "method": "GET",
    "path": "/nft/:address/:token_id/transfers",
    "pathParams": [
      {
        "name": "address",
        "description": "The address of the NFT contract",
        "required": true,
        "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB",
        "type": "string"
      },
      {
        "name": "token_id",
        "description": "The ID of the token",
        "required": true,
        "example": "1",
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "chain",
        "description": "The chain to query",
        "required": false,
        "example": "eth",
        "type": "string",
        "enum": [
          "eth",
          "0x1",
          "goerli",
          "0x5",
          "sepolia",
          "0xaa36a7",
          "polygon",
          "0x89",
          "mumbai",
          "0x13881",
          "bsc",
          "0x38",
          "bsc testnet",
          "0x61",
          "avalanche",
          "0xa86a",
          "avalanche testnet",
          "0xa869",
          "fantom",
          "0xfa",
          "palm",
          "0x2a15c308d",
          "cronos",
          "0x19",
          "cronos testnet",
          "0x152",
          "arbitrum",
          "0xa4b1"
        ]
      },
      {
        "name": "format",
        "description": "The format of the token ID",
        "required": false,
        "example": "decimal",
        "type": "string"
      },
      {
        "name": "limit",
        "description": "The desired page size of the result.",
        "required": false,
        "type": "number"
      },
      {
        "name": "disable_total",
        "description": "If the result should skip returning the total count (Improves performance).",
        "required": false,
        "type": "boolean"
      },
      {
        "name": "cursor",
        "description": "The cursor returned in the previous response (used for getting the next page).",
        "type": "string"
      }
    ],
    "responses": [
      {
        "status": "200",
        "description": "Returns a collection of NFT transfers",
        "body": {
          "type": "object",
          "fields": [
            {
              "name": "total",
              "type": "number",
              "description": "The total number of matches for this query",
              "example": "2000"
            },
            {
              "name": "page",
              "type": "number",
              "description": "The current page of the result",
              "example": "2"
            },
            {
              "name": "page_size",
              "type": "number",
              "description": "The number of results per page",
              "example": "100"
            },
            {
              "name": "cursor",
              "description": "The cursor returned in the previous response (used for getting the next page). Learn more on cursor pagination [here](/web3-data-api/pagination).",
              "type": "string"
            },
            {
              "name": "result",
              "type": "object",
              "fields": [
                {
                  "name": "token_address",
                  "type": "string",
                  "description": "The address of the NFT contract",
                  "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                },
                {
                  "name": "token_id",
                  "type": "string",
                  "description": "The token ID of the NFT",
                  "example": "15"
                },
                {
                  "name": "from_address",
                  "type": "string",
                  "description": "The address that sent the NFT",
                  "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                },
                {
                  "name": "to_address",
                  "type": "string",
                  "description": "The address that received the NFT",
                  "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "The value that was sent in the transaction (ETH/BNB/etc..)",
                  "example": "1000000000000000"
                },
                {
                  "name": "amount",
                  "type": "string",
                  "description": "The number of tokens transferred",
                  "example": "1"
                },
                {
                  "name": "contract_type",
                  "type": "string",
                  "description": "The type of NFT contract standard",
                  "example": "ERC721"
                },
                {
                  "name": "block_number",
                  "type": "string",
                  "description": "The block number of the transaction",
                  "example": "88256"
                },
                {
                  "name": "block_timestamp",
                  "type": "string",
                  "description": "The block timestamp",
                  "example": "2021-06-04T16:00:15"
                },
                {
                  "name": "block_hash",
                  "type": "string",
                  "description": "The block hash of the transaction"
                },
                {
                  "name": "transaction_hash",
                  "type": "string",
                  "description": "The transaction hash",
                  "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                },
                {
                  "name": "transaction_type",
                  "type": "string",
                  "description": "The transaction type"
                },
                {
                  "name": "transaction_index",
                  "type": "number",
                  "description": "The transaction index"
                },
                {
                  "name": "log_index",
                  "type": "number",
                  "description": "The log index"
                },
                {
                  "name": "operator",
                  "type": "string",
                  "description": "The operator present only for ERC1155 transfers",
                  "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                }
              ]
            },
            {
              "name": "block_exists",
              "type": "boolean",
              "description": "Indicator if the block exists",
              "example": true
            },
            {
              "name": "index_complete",
              "type": "boolean",
              "description": "Indicator if the block is fully indexed",
              "example": true
            }
          ]
        }
      }
    ],
    "codeSamples": [
      {
        "language": "node",
        "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const chain = EvmChain.ETHEREUM;\n\n    const address = '0x1234567890123456789012345678901234567890';\n\n    const tokenId = 1;\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.nft.getNFTTransfers({\n        address,\n        chain,\n        tokenId,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
        "name": "Moralis NodeJS SDK"
      },
      {
        "language": "csharp",
        "code": "private async Task<bool> GetWalletTokenIdTransfers(IWeb3Api web3Api)\n{\n    bool result = true;\n     try\n    {\n        NftTransferCollection resp = await web3Api.Token.GetWalletTokenIdTransfers(\"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"10\", ChainList.eth, null, \"\", 10);\n         result = resp is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n     return result;\n}\n        ",
        "name": "Moralis C# SDK"
      },
      {
        "language": "python",
        "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\", \n    \"token_id\": \"1\", \n    \"chain\": \"eth\", \n    \"format\": \"decimal\", \n    \"limit\": 0, \n    \"cursor\": \"\", \n}\n\nresult = evm_api.nft.get_nft_transfers(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
      }
    ]
  },
  "getNFTTokenIdOwners": {
    "apiHost": "https://deep-index.moralis.io/api/v2",
    "summary": "Get NFT owners by token ID",
    "description": "Get owners of a specific NFT given the contract address and token ID. \n* Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n",
    "method": "GET",
    "path": "/nft/:address/:token_id/owners",
    "pathParams": [
      {
        "name": "address",
        "description": "The address of the NFT contract",
        "required": true,
        "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB",
        "type": "string"
      },
      {
        "name": "token_id",
        "description": "The ID of the token",
        "required": true,
        "example": "1",
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "chain",
        "description": "The chain to query",
        "required": false,
        "example": "eth",
        "type": "string",
        "enum": [
          "eth",
          "0x1",
          "goerli",
          "0x5",
          "sepolia",
          "0xaa36a7",
          "polygon",
          "0x89",
          "mumbai",
          "0x13881",
          "bsc",
          "0x38",
          "bsc testnet",
          "0x61",
          "avalanche",
          "0xa86a",
          "avalanche testnet",
          "0xa869",
          "fantom",
          "0xfa",
          "palm",
          "0x2a15c308d",
          "cronos",
          "0x19",
          "cronos testnet",
          "0x152",
          "arbitrum",
          "0xa4b1"
        ]
      },
      {
        "name": "format",
        "description": "The format of the token ID",
        "required": false,
        "example": "decimal",
        "type": "string"
      },
      {
        "name": "limit",
        "description": "The desired page size of the result.",
        "required": false,
        "type": "number"
      },
      {
        "name": "disable_total",
        "description": "If the result should skip returning the total count (Improves performance).",
        "required": false,
        "type": "boolean"
      },
      {
        "name": "cursor",
        "description": "The cursor returned in the previous response (used for getting the next page). Learn more on cursor pagination [here](/web3-data-api/pagination).",
        "type": "string"
      },
      {
        "name": "normalizeMetadata",
        "description": "The option to enable metadata normalization. Learn more about metadata normalization [here](https://docs.moralis.io/web3-data-api/metadata-normalization/metadata-normalization).",
        "required": false,
        "type": "boolean"
      }
    ],
    "responses": [
      {
        "status": "200",
        "description": "Returns a collection of NFTs with their respective owners.",
        "body": {
          "type": "object",
          "fields": [
            {
              "name": "status",
              "type": "string",
              "description": "The syncing status of the address [SYNCING/SYNCED]",
              "example": "SYNCING"
            },
            {
              "name": "total",
              "type": "number",
              "description": "The total number of matches for this query",
              "example": "2000"
            },
            {
              "name": "page",
              "type": "number",
              "description": "The current page of the result",
              "example": "2"
            },
            {
              "name": "page_size",
              "type": "number",
              "description": "The number of results per page",
              "example": "100"
            },
            {
              "name": "cursor",
              "description": "The cursor returned in the previous response (used for getting the next page). Learn more on cursor pagination [here](/web3-data-api/pagination).",
              "type": "string"
            },
            {
              "name": "result",
              "type": "object",
              "fields": [
                {
                  "name": "token_address",
                  "type": "string",
                  "description": "The address of the NFT contract",
                  "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB"
                },
                {
                  "name": "token_id",
                  "type": "string",
                  "description": "The token ID of the NFT",
                  "example": "15"
                },
                {
                  "name": "contract_type",
                  "type": "string",
                  "description": "The type of NFT contract standard",
                  "example": "ERC721"
                },
                {
                  "name": "owner_of",
                  "type": "string",
                  "description": "The wallet address of the owner of the NFT",
                  "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
                },
                {
                  "name": "block_number",
                  "type": "string",
                  "description": "The block number when the amount or owner changed",
                  "example": "88256"
                },
                {
                  "name": "block_number_minted",
                  "type": "string",
                  "description": "The block number when the NFT was minted",
                  "example": "88256"
                },
                {
                  "name": "token_uri",
                  "type": "string",
                  "description": "The URI to the metadata of the token"
                },
                {
                  "name": "metadata",
                  "type": "string",
                  "description": "The metadata of the token"
                },
                {
                  "name": "normalized_metadata",
                  "description": "A normalized metadata version of the NFT's metadata.",
                  "type": "object",
                  "fields": [
                    {
                      "name": "name",
                      "type": "string",
                      "description": "The name or title of the NFT",
                      "example": "Moralis Mug"
                    },
                    {
                      "name": "description",
                      "type": "string",
                      "description": "A detailed description of the NFT",
                      "example": "Moralis Coffee nug 3D Asset that can be used in 3D worldspaces. This NFT is presented as a flat PNG, a Unity3D Prefab and a standard fbx."
                    },
                    {
                      "name": "image",
                      "type": "string",
                      "description": "The URL of the NFT's image",
                      "example": "https://arw2wxg84h6b.moralishost.com:2053/server/files/tNJatzsHirx4V2VAep6sc923OYGxvkpBeJttR7Ks/de504bbadadcbe30c86278342fcf2560_moralismug.png"
                    },
                    {
                      "name": "external_link",
                      "type": "string",
                      "description": "A link to additional information",
                      "example": "https://giphy.com/gifs/loop-recursion-ting-aaODAv1iuQdgI"
                    },
                    {
                      "name": "animation_url",
                      "type": "string",
                      "description": "An animated version of the NFT's image",
                      "example": "https://giphy.com/gifs/food-design-donuts-o9ngTPVYW4qo8"
                    },
                    {
                      "name": "attributes",
                      "type": "array",
                      "field": {
                        "type": "object",
                        "fields": [
                          {
                            "name": "trait_type",
                            "type": "string",
                            "description": "The trait title or descriptor",
                            "example": "Eye Color"
                          },
                          {
                            "name": "value",
                            "type": "string",
                            "description": "The value of the attribute",
                            "example": "hazel"
                          },
                          {
                            "name": "display_type",
                            "type": "string",
                            "description": "The type the attribute value should be displayed as",
                            "example": "string"
                          },
                          {
                            "name": "max_value",
                            "type": "number",
                            "description": "For numeric values, the upper range",
                            "example": 100
                          },
                          {
                            "name": "trait_count",
                            "type": "number",
                            "description": "The number of possible values for this trait",
                            "example": 7
                          },
                          {
                            "name": "order",
                            "type": "number",
                            "description": "Order the trait should appear in the attribute list.",
                            "example": 1
                          }
                        ]
                      }
                    }
                  ]
                },
                {
                  "name": "media_links",
                  "description": "A set of links to 'thumbnail / preview' media files",
                  "type": "object",
                  "fields": [
                    {
                      "name": "mimetype",
                      "type": "string",
                      "required": true,
                      "description": "The mimetype of the media file [see https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types]"
                    },
                    {
                      "name": "category",
                      "type": "string",
                      "required": true,
                      "enum": ["image", "audio", "video"]
                    },
                    {
                      "name": "original_media_url",
                      "type": "string",
                      "required": true,
                      "description": "The url of the original media file."
                    },
                    {
                      "name": "parent_hash",
                      "type": "string",
                      "required": true,
                      "description": "Hash value of the original media file."
                    },
                    {
                      "name": "media_collection",
                      "required": true,
                      "description": "Preview item associated with the original",
                      "type": "object",
                      "fields": [
                        {
                          "name": "original",
                          "required": true,
                          "description": "Information about the original media file",
                          "type": "object",
                          "fields": [
                            {
                              "name": "width",
                              "type": "integer",
                              "description": "The width of the preview image.",
                              "required": true
                            },
                            {
                              "name": "height",
                              "type": "integer",
                              "description": "The height of the preview image.",
                              "required": true
                            },
                            {
                              "name": "url",
                              "type": "string",
                              "description": "The url of the preview file.",
                              "required": true
                            }
                          ]
                        },
                        {
                          "name": "low",
                          "required": true,
                          "description": "Preview media file, lowest quality (for images 100px x 100px)",
                          "type": "object",
                          "fields": [
                            {
                              "name": "width",
                              "type": "integer",
                              "description": "The width of the preview image.",
                              "required": true
                            },
                            {
                              "name": "height",
                              "type": "integer",
                              "description": "The height of the preview image.",
                              "required": true
                            },
                            {
                              "name": "url",
                              "type": "string",
                              "description": "The url of the preview file.",
                              "required": true
                            }
                          ]
                        },
                        {
                          "name": "medium",
                          "required": true,
                          "description": "Preview media file, medium quality (for images 250px x 250px)",
                          "type": "object",
                          "fields": [
                            {
                              "name": "width",
                              "type": "integer",
                              "description": "The width of the preview image.",
                              "required": true
                            },
                            {
                              "name": "height",
                              "type": "integer",
                              "description": "The height of the preview image.",
                              "required": true
                            },
                            {
                              "name": "url",
                              "type": "string",
                              "description": "The url of the preview file.",
                              "required": true
                            }
                          ]
                        },
                        {
                          "name": "high",
                          "required": true,
                          "description": "Preview media file, highest quality (for images 500px x 500px)",
                          "type": "object",
                          "fields": [
                            {
                              "name": "width",
                              "type": "integer",
                              "description": "The width of the preview image.",
                              "required": true
                            },
                            {
                              "name": "height",
                              "type": "integer",
                              "description": "The height of the preview image.",
                              "required": true
                            },
                            {
                              "name": "url",
                              "type": "string",
                              "description": "The url of the preview file.",
                              "required": true
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "amount",
                  "type": "string",
                  "description": "The number of this item the user owns (used by ERC1155)",
                  "example": "1"
                },
                {
                  "name": "name",
                  "type": "string",
                  "description": "The name of the NFT contract",
                  "example": "CryptoKitties"
                },
                {
                  "name": "symbol",
                  "type": "string",
                  "description": "The symbol of the NFT contract",
                  "example": "RARI"
                },
                {
                  "name": "token_hash",
                  "type": "string",
                  "description": "The token hash",
                  "example": "502cee781b0fb40ea02508b21d319ced"
                },
                {
                  "name": "last_token_uri_sync",
                  "type": "string",
                  "description": "When the token_uri was last updated",
                  "example": "2021-02-24T00:47:26.647Z"
                },
                {
                  "name": "last_metadata_sync",
                  "type": "string",
                  "description": "When the metadata was last updated",
                  "example": "2021-02-24T00:47:26.647Z"
                }
              ]
            }
          ]
        }
      }
    ],
    "codeSamples": [
      {
        "language": "node",
        "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const chain = EvmChain.ETHEREUM;\n\n    const address = '0x1234567890123456789012345678901234567890';\n\n    const tokenId = 1;\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.nft.getNFTTokenIdOwners({\n        address,\n        chain,\n        tokenId,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
        "name": "Moralis NodeJS SDK"
      },
      {
        "language": "csharp",
        "code": "private async Task<bool> GetTokenIdOwners(IWeb3Api web3Api)\n{\n    bool result = true;\n    try\n    {\n        NftOwnerCollection resp = await web3Api.Token.GetTokenIdOwners(\"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", \"10\", ChainList.eth, null, \"\", 10);\n        result = resp is { };\n    }\n    catch (Exception exp) { result = false; }\n    return result;\n}\n        ",
        "name": "Moralis C# SDK"
      },
      {
        "language": "python",
        "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\", \n    \"token_id\": \"1\", \n    \"chain\": \"eth\", \n    \"format\": \"decimal\", \n    \"limit\": 0, \n    \"disable_total\": True, \n    \"cursor\": \"\", \n    \"normalizeMetadata\": True, \n}\n\nresult = evm_api.nft.get_nft_token_id_owners(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
      }
    ]
  },
  "syncNFTContract": {
    "apiHost": "https://deep-index.moralis.io/api/v2",
    "summary": "Resync NFT Contract",
    "description": "Initiates a sync of a previously non synced contract.",
    "method": "PUT",
    "path": "/nft/:address/sync",
    "pathParams": [
      {
        "name": "address",
        "description": "The address of the NFT contract",
        "required": true,
        "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB",
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "chain",
        "description": "The chain to query",
        "required": false,
        "example": "eth",
        "type": "string",
        "enum": [
          "eth",
          "0x1",
          "goerli",
          "0x5",
          "sepolia",
          "0xaa36a7",
          "polygon",
          "0x89",
          "mumbai",
          "0x13881",
          "bsc",
          "0x38",
          "bsc testnet",
          "0x61",
          "avalanche",
          "0xa86a",
          "avalanche testnet",
          "0xa869",
          "fantom",
          "0xfa",
          "palm",
          "0x2a15c308d",
          "cronos",
          "0x19",
          "cronos testnet",
          "0x152",
          "arbitrum",
          "0xa4b1"
        ]
      }
    ],
    "responses": [
      {
        "status": "201",
        "description": "Contract address was triggered for index."
      }
    ],
    "codeSamples": [
      {
        "language": "node",
        "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const chain = EvmChain.ETHEREUM;\n\n    const address = '0x1234567890123456789012345678901234567890';\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.nft.syncNFTContract({\n        address,\n        chain,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
        "name": "Moralis NodeJS SDK"
      },
      {
        "language": "csharp",
        "code": "private async Task<bool> SyncNFTContract(IWeb3Api web3Api)\n{\n    bool result = true;\n\n    try\n    {\n        bool resp = await web3Api.Token.SyncNFTContract(\"0x698d7D745B7F5d8EF4fdB59CeB660050b3599AC3\", ChainList.mumbai);\n        result = resp;\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n\n    return result;\n}\n        ",
        "name": "Moralis C# SDK"
      },
      {
        "language": "python",
        "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\", \n    \"chain\": \"eth\", \n}\n\nresult = evm_api.nft.sync_nft_contract(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
      }
    ]
  },
  "reSyncMetadata": {
    "apiHost": "https://deep-index.moralis.io/api/v2",
    "summary": "Resync NFT metadata",
    "description": "Resync the metadata for an NFT\n* The metadata flag will request the NFT's metadata from an already existing token_uri\n* The uri (default) flag will fetch the latest token_uri from the given NFT contract address. In sync mode the metadata will also be fetched\n* The sync mode will make the endpoint synchronous so it will wait for the task to be completed before responding\n* The async mode (default) will make the endpoint asynchronous so we will wait for the task to be completed before responding\n",
    "method": "GET",
    "path": "/nft/:address/:token_id/metadata/resync",
    "pathParams": [
      {
        "name": "address",
        "description": "The address of the NFT contract",
        "required": true,
        "example": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB",
        "type": "string"
      },
      {
        "name": "token_id",
        "description": "The ID of the token",
        "required": true,
        "example": "1",
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "chain",
        "description": "The chain to query",
        "required": false,
        "example": "eth",
        "type": "string",
        "enum": [
          "eth",
          "0x1",
          "goerli",
          "0x5",
          "sepolia",
          "0xaa36a7",
          "polygon",
          "0x89",
          "mumbai",
          "0x13881",
          "bsc",
          "0x38",
          "bsc testnet",
          "0x61",
          "avalanche",
          "0xa86a",
          "avalanche testnet",
          "0xa869",
          "fantom",
          "0xfa",
          "palm",
          "0x2a15c308d",
          "cronos",
          "0x19",
          "cronos testnet",
          "0x152",
          "arbitrum",
          "0xa4b1"
        ]
      },
      {
        "name": "flag",
        "description": "The type of resync to operate",
        "required": false,
        "example": "uri",
        "default": "uri",
        "type": "string",
        "enum": ["uri", "metadata"]
      },
      {
        "name": "mode",
        "description": "To define the behaviour of the endpoint",
        "required": false,
        "example": "async",
        "default": "async",
        "type": "string",
        "enum": ["sync", "async"]
      }
    ],
    "responses": [
      {
        "status": "200",
        "description": "(In sync mode) Resync request executed.",
        "body": {
          "type": "object",
          "fields": [
            {
              "name": "status",
              "type": "string",
              "description": "The status of the resync request"
            }
          ]
        }
      },
      {
        "status": "202",
        "description": "The resync request was received and will be executed.",
        "body": {
          "type": "object",
          "fields": [
            {
              "name": "status",
              "type": "string",
              "description": "The status of the resync request"
            }
          ]
        }
      },
      {
        "status": "404",
        "description": "(In sync mode) Resync request executed and metadata could not be updated.",
        "body": {
          "type": "object",
          "fields": [
            {
              "name": "status",
              "type": "string",
              "description": "The status of the resync request"
            }
          ]
        }
      }
    ],
    "codeSamples": [
      {
        "language": "node",
        "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const chain = EvmChain.ETHEREUM;\n\n    const address = '0x1234567890123456789012345678901234567890';\n\n    const tokenId = 1;\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.nft.reSyncMetadata({\n        address,\n        chain,\n        tokenId,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
        "name": "Moralis NodeJS SDK"
      },
      {
        "language": "csharp",
        "code": "private async Task<bool> ReSyncMetadata(IWeb3Api web3Api)\n{\n    bool result = true;\n\n    try\n    {\n        bool resp = await web3Api.Token.ReSyncMetadata(\"0x698d7D745B7F5d8EF4fdB59CeB660050b3599AC3\", \"15310200874782\", ChainList.mumbai);\n        result = resp;\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n\n    return result;\n}\n\n        ",
        "name": "Moralis C# SDK"
      },
      {
        "language": "python",
        "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\", \n    \"token_id\": \"1\", \n    \"chain\": \"eth\", \n    \"flag\": \"uri\", \n    \"mode\": \"sync\", \n}\n\nresult = evm_api.nft.re_sync_metadata(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
      }
    ]
  },
  "getNFTLowestPrice": {
    "apiHost": "https://deep-index.moralis.io/api/v2",
    "summary": "Get NFT lowest price",
    "description": "Get the lowest executed price for an NFT contract for the last x days (only trades paid in ETH).",
    "method": "GET",
    "path": "/nft/:address/lowestprice",
    "pathParams": [
      {
        "name": "address",
        "description": "The address of the NFT contract",
        "required": true,
        "example": "0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D",
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "chain",
        "description": "The chain to query",
        "required": false,
        "example": "eth",
        "type": "string",
        "enum": [
          "eth",
          "0x1",
          "goerli",
          "0x5",
          "sepolia",
          "0xaa36a7",
          "polygon",
          "0x89",
          "mumbai",
          "0x13881",
          "bsc",
          "0x38",
          "bsc testnet",
          "0x61",
          "avalanche",
          "0xa86a",
          "avalanche testnet",
          "0xa869",
          "fantom",
          "0xfa",
          "palm",
          "0x2a15c308d",
          "cronos",
          "0x19",
          "cronos testnet",
          "0x152",
          "arbitrum",
          "0xa4b1"
        ]
      },
      {
        "name": "days",
        "description": "The number of days to look back to find the lowest price\nIf not provided 7 days will be the default\n",
        "required": false,
        "type": "number"
      },
      {
        "name": "marketplace",
        "description": "Marketplace from which to get the trades (only OpenSea is supported at the moment)",
        "required": false,
        "example": "opensea",
        "type": "string"
      }
    ],
    "responses": [
      {
        "status": "200",
        "description": "Returns the trade with the lowest price",
        "body": {
          "type": "object",
          "fields": [
            {
              "name": "transaction_hash",
              "type": "string",
              "description": "The transaction hash",
              "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
            },
            {
              "name": "transaction_index",
              "type": "string",
              "description": "The transaction index"
            },
            {
              "name": "token_ids",
              "type": "array",
              "description": "The token ID(s) traded",
              "example": ["15", "54"],
              "field": { "type": "string", "example": "15" }
            },
            {
              "name": "seller_address",
              "type": "string",
              "description": "The address that sold the NFT",
              "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
            },
            {
              "name": "buyer_address",
              "type": "string",
              "description": "The address that bought the NFT",
              "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
            },
            {
              "name": "marketplace_address",
              "type": "string",
              "description": "The address of the contract that traded the NFT",
              "example": "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
            },
            {
              "name": "price",
              "type": "string",
              "description": "The value that was sent in the transaction (ETH/BNB/etc..)",
              "example": "1000000000000000"
            },
            {
              "name": "block_timestamp",
              "type": "string",
              "description": "The block timestamp",
              "example": "2021-06-04T16:00:15"
            },
            {
              "name": "block_number",
              "type": "string",
              "description": "The block number of the transaction",
              "example": "13680123"
            },
            {
              "name": "block_hash",
              "type": "string",
              "description": "The block hash",
              "example": "0x4a7c916ca4a970358b9df90051008f729685ff05e9724a9dddba32630c37cb96"
            }
          ]
        }
      }
    ],
    "codeSamples": [
      {
        "language": "node",
        "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const chain = EvmChain.ETHEREUM;\n\n    const address = '0x1234567890123456789012345678901234567890';\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.nft.getNFTLowestPrice({\n        address,\n        chain,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
        "name": "Moralis NodeJS SDK"
      },
      {
        "language": "csharp",
        "code": "private async Task<bool> GetNFTLowestPrice(IWeb3Api web3Api)\n{\n    bool result = true;\n     try\n    {\n        Trade resp = await web3Api.Token.GetNFTLowestPrice(\"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", ChainList.eth, 2000);\n         result = resp is { };\n    }\n    catch (Exception exp)\n    {\n        result = false;\n    }\n     return result;\n}\n        ",
        "name": "Moralis C# SDK"
      },
      {
        "language": "python",
        "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"address\": \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\", \n    \"chain\": \"eth\", \n    \"days\": 0, \n    \"marketplace\": \"opensea\", \n}\n\nresult = evm_api.nft.get_nft_lowest_price(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
      }
    ]
  },
  "searchNFTs": {
    "apiHost": "https://deep-index.moralis.io/api/v2",
    "summary": "Search NFTs",
    "description": "Get NFTs that match a given metadata search query.",
    "method": "GET",
    "path": "/nft/search",
    "pathParams": [],
    "queryParams": [
      {
        "name": "chain",
        "description": "The chain to query",
        "required": false,
        "example": "eth",
        "type": "string",
        "enum": [
          "eth",
          "0x1",
          "goerli",
          "0x5",
          "sepolia",
          "0xaa36a7",
          "polygon",
          "0x89",
          "mumbai",
          "0x13881",
          "bsc",
          "0x38",
          "bsc testnet",
          "0x61",
          "avalanche",
          "0xa86a",
          "avalanche testnet",
          "0xa869",
          "fantom",
          "0xfa",
          "palm",
          "0x2a15c308d",
          "cronos",
          "0x19",
          "cronos testnet",
          "0x152",
          "arbitrum",
          "0xa4b1"
        ]
      },
      {
        "name": "format",
        "description": "The format of the token ID",
        "required": false,
        "example": "decimal",
        "type": "string"
      },
      {
        "name": "q",
        "description": "The search string",
        "required": true,
        "type": "string"
      },
      {
        "name": "filter",
        "description": "What fields the search should match on. To look into the entire metadata set the value to 'global'. To have a better response time you can look into a specific field like name",
        "required": false,
        "example": "name",
        "type": "string"
      },
      {
        "name": "from_block",
        "description": "The minimum block number from which to start the search\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
        "required": false,
        "type": "number"
      },
      {
        "name": "to_block",
        "description": "The maximum block number from which to end the search\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
        "required": false,
        "type": "number"
      },
      {
        "name": "from_date",
        "description": "The date from which to start the search (any format that is accepted by momentjs)\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n",
        "required": false,
        "type": "string"
      },
      {
        "name": "to_date",
        "description": "Get search results up until this date (any format that is accepted by momentjs)\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n",
        "type": "string"
      },
      {
        "name": "addresses",
        "description": "The addresses to get metadata for",
        "required": false,
        "type": "array",
        "field": { "type": "string" }
      },
      {
        "name": "cursor",
        "description": "The cursor returned in the previous response (used for getting the next page). Learn more on cursor pagination [here](/web3-data-api/pagination).",
        "type": "string",
        "required": false
      },
      {
        "name": "limit",
        "description": "The desired page size of the result.",
        "required": false,
        "type": "number"
      },
      {
        "name": "disable_total",
        "description": "If the result should skip returning the total count (Improves performance).",
        "required": false,
        "type": "boolean"
      }
    ],
    "responses": [
      {
        "status": "200",
        "description": "Returns the matching NFTs",
        "body": {
          "type": "object",
          "fields": [
            {
              "name": "total",
              "type": "number",
              "description": "The total number of matches for this query",
              "example": "2000"
            },
            {
              "name": "page",
              "type": "number",
              "description": "The current page of the result",
              "example": "2"
            },
            {
              "name": "page_size",
              "type": "number",
              "description": "The number of results per page",
              "example": "100"
            },
            {
              "name": "result",
              "type": "object",
              "fields": [
                {
                  "name": "token_id",
                  "type": "string",
                  "description": "The token ID of the NFT",
                  "example": "889"
                },
                {
                  "name": "token_address",
                  "type": "string",
                  "description": "The address of the NFT contract",
                  "example": "0x8ce66ff0865570d1ff0bb0098fa41b4dc61e02e6"
                },
                {
                  "name": "token_uri",
                  "type": "string",
                  "description": "The URI to the metadata of the token",
                  "example": "https://ipfs.moralis.io:2053/ipfs/QmZZbo8u8zEWg7wtmZhJS2W718WL6FA95T4XdgmCcLp1SJ/889.json"
                },
                {
                  "name": "metadata",
                  "type": "string",
                  "description": "The metadata of the token",
                  "example": "{\"name\":\"Bape #889\",\"description\":\"The #1 metavestor clan (NFT/DAO) by a team with multi billion dollar company experience.\",\"image\":\"https://bapesclan.mypinata.cloud/ipfs/QmTSUD5JA6qHaC5t25mcXySfz19AV9u4Mb6Na7ntQ6tEwf/889.jpg\",\"attributes\":[{\"trait_type\":\"Background\",\"value\":\"Black\"},{\"trait_type\":\"Body\",\"value\":\"Man\"},{\"trait_type\":\"Dress\",\"value\":\"Suit Tie Blue\"},{\"trait_type\":\"Face\",\"value\":\"Pipe\"},{\"trait_type\":\"Eye\",\"value\":\"Eye\"}]}"
                },
                { "name": "is_valid", "type": "number", "example": "1" },
                { "name": "syncing", "type": "number", "example": "2" },
                { "name": "frozen", "type": "number", "example": "0" },
                { "name": "resyncing", "type": "number", "example": "0" },
                {
                  "name": "contract_type",
                  "type": "string",
                  "description": "The type of NFT contract standard",
                  "example": "ERC721"
                },
                {
                  "name": "token_hash",
                  "type": "string",
                  "example": "fffa3102469ce77f569893d16d5884f9"
                },
                {
                  "name": "batch_id",
                  "type": "string",
                  "example": "fd995c8a-f8b2-40cb-a407-f43e552638b4"
                },
                {
                  "name": "metadata_name",
                  "type": "string",
                  "example": "Bape #889"
                },
                {
                  "name": "metadata_description",
                  "type": "string",
                  "example": "The #1 metavestor clan (NFT/DAO) by a team with multi billion dollar company experience."
                },
                {
                  "name": "metadata_attributes",
                  "type": "string",
                  "example": "[{\"trait_type\":\"Background\",\"value\":\"Black\"},{\"trait_type\":\"Body\",\"value\":\"Man\"},{\"trait_type\":\"Dress\",\"value\":\"Suit Tie Blue\"},{\"trait_type\":\"Face\",\"value\":\"Pipe\"},{\"trait_type\":\"Eye\",\"value\":\"Eye\"}]"
                },
                {
                  "name": "block_number_minted",
                  "type": "string",
                  "example": "14265936"
                },
                { "name": "opensea_lookup", "type": "json", "example": null },
                {
                  "name": "minter_address",
                  "type": "string",
                  "example": "0xdcf086e3f7954b38180daae1405569da86588bfe"
                },
                {
                  "name": "transaction_minted",
                  "type": "string",
                  "example": "0x2c8d7ec7a8439b0f67b50e93be63242de52e9b5cdfc7dc0aee80c6a2f104c41a"
                },
                {
                  "name": "frozen_log_index",
                  "type": "json",
                  "example": null
                },
                { "name": "imported", "type": "json", "example": null },
                {
                  "name": "last_token_uri_sync",
                  "type": "string",
                  "description": "When the token_uri was last updated",
                  "example": "2021-02-24T00:47:26.647Z"
                },
                {
                  "name": "last_metadata_sync",
                  "type": "string",
                  "description": "When the metadata was last updated",
                  "example": "2021-02-24T00:47:26.647Z"
                },
                {
                  "name": "createdAt",
                  "type": "string",
                  "example": "2022-02-24T00:47:26.647Z"
                },
                {
                  "name": "updatedAt",
                  "type": "string",
                  "example": "2022-04-09T23:56:44.807Z"
                }
              ]
            }
          ]
        }
      }
    ],
    "codeSamples": [
      {
        "language": "node",
        "code": "import Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\ntry {\n    const chain = EvmChain.ETHEREUM;\n\n    const q = 'Pancake';\n\n    const filter = 'name';\n\n    await Moralis.start({\n        apiKey: 'YOUR_API_KEY',\n        // ...and any other configuration\n    });\n\n    const response = await Moralis.EvmApi.nft.searchNFTs({\n        q,\n        filter,\n        chain,\n    });\n\n    console.log(response?.result);\n} catch (e) {\n    console.error(e);\n}\n        ",
        "name": "Moralis NodeJS SDK"
      },
      {
        "language": "csharp",
        "code": "private async Task<bool> SearchNFTs(IWeb3Api web3Api)\n{\n    bool result = true;\n    try\n    {\n        NftMetadataCollection resp = await web3Api.Token.SearchNFTs(\"Apes\", ChainList.eth, null, null, null, null, null, null, \"\", 10);\n        result = resp is { };\n    }\n    catch (Exception exp) { result = false; }\n    return result;\n}\n        ",
        "name": "Moralis C# SDK"
      },
      {
        "language": "python",
        "code": "from moralis import evm_api\n\napi_key = \"YOUR_API_KEY\"\nparams = {\n    \"q\": \"\", \n    \"chain\": \"eth\", \n    \"format\": \"decimal\", \n    \"filter\": \"name\", \n    \"from_block\": 0, \n    \"to_block\": 0, \n    \"from_date\": \"\", \n    \"to_date\": \"\", \n    \"addresses\": [], \n    \"cursor\": \"\", \n    \"limit\": 0, \n}\n\nresult = evm_api.nft.search_nfts(\n    api_key=api_key,\n    params=params,\n)\n\nprint(result)\n"
      }
    ]
  }
}
